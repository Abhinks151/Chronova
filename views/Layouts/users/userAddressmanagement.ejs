<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Address Management</title>
		<link rel="stylesheet" href="/styles/user/user-profile-sidebar.css" />
		<link rel="stylesheet" href="/styles/user/user-address-management.css" />
		<link
			rel="stylesheet"
			href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
		/>
		<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
	</head>
	<body>
		<div class="layout-wrapper">
			<!-- Sidebar will be included as partial -->
			<%- include('../../partials/user-profile-sidebar') %>

			<div class="main-content">
				<div class="content-wrapper">
					<!-- Page Header Section -->
					<div class="page-header-section">
						<div class="page-header">
							<div>
								<h1>My Addresses</h1>
								<p class="page-subtitle">
									Manage your saved addresses
								</p>
							</div>
							<button
								class="btn btn-primary"
								onclick="openAddModal()"
							>
								<span class="icon">+</span>
								Add New Address
							</button>
						</div>
					</div>

					<!-- Loading spinner -->
					<div
						id="loadingSpinner"
						class="loading-spinner"
						style="display: none;"
					>
						<div class="spinner"></div>
						<p>Loading addresses...</p>
					</div>

					<!-- Address Cards Section -->
					<div class="address-cards-section">
						<div class="addresses-container" id="addressesContainer">
							<!-- Addresses will be loaded dynamically -->
						</div>
					</div>
				</div>
			</div>

			<!-- Add/Edit Address Modal -->
			<div class="modal-overlay" id="addressModal">
				<div class="modal">
					<div class="modal-header">
						<h2 id="modalTitle">Add New Address</h2>
						<button class="modal-close" onclick="closeModal()">
							&times;
						</button>
					</div>
					<div class="modal-body">
						<form id="addressForm">
							<!-- Hidden field for address ID (only used during edit) -->
							<input
								type="hidden"
								id="addressId"
								name="addressId"
							/>

							<div class="form-row">
								<div class="form-group">
									<label for="addressName"
										>Address Type *</label
									>
									<select
										id="addressName"
										name="addressName"
										required
									>
										<option value="">
											Select Address Type
										</option>
										<option value="Home">Home</option>
										<option value="Work">Work</option>
										<option value="Other">Other</option>
									</select>
								</div>
								<div class="form-group">
									<label for="fullName">Full Name *</label>
									<input
										type="text"
										id="fullName"
										name="fullName"
										placeholder="Enter full name"
										required
									/>
								</div>
							</div>

							<div class="form-row">
								<div class="form-group">
									<label for="phone">Phone Number *</label>
									<input
										type="tel"
										id="phone"
										name="phone"
										placeholder="Enter phone number"
										required
									/>
								</div>
								<div class="form-group">
									<label for="pincode">Pincode *</label>
									<input
										type="text"
										id="pincode"
										name="pincode"
										placeholder="Enter pincode"
										required
										oninput="handlePincodeInput()"
									/>
								</div>
							</div>

							<div class="form-group">
								<label for="addressLine">Address Line *</label>
								<textarea
									id="addressLine"
									name="addressLine"
									placeholder="House no, Building name, Street, Area"
									required
								></textarea>
							</div>

							<div class="form-row">
								<div class="form-group">
									<label for="city">City *</label>
									<input
										type="text"
										id="city"
										name="city"
										placeholder="Enter city"
										required
									/>
								</div>
								<div class="form-group">
									<label for="state">State *</label>
									<input
										type="text"
										id="state"
										name="state"
										placeholder="Enter state"
										required
									/>
								</div>
							</div>

							<div class="form-group">
								<label for="country">Country *</label>
								<input
									type="text"
									id="country"
									name="country"
									placeholder="Enter country"
									required
								/>
							</div>

							<div class="form-group">
								<label for="landmark">Landmark</label>
								<input
									type="text"
									id="landmark"
									name="landmark"
									placeholder="Enter nearby landmark (optional)"
								/>
							</div>

							<div class="form-group checkbox-group">
								<label class="checkbox-label">
									<input
										type="checkbox"
										id="isDefault"
										name="isDefault"
									/>
									<span class="checkmark"></span>
									Set as default address
								</label>
							</div>
						</form>
					</div>
					<div class="modal-footer">
						<button
							type="button"
							class="btn btn-secondary"
							onclick="closeModal()"
						>
							Cancel
						</button>
						<button
							type="button"
							class="btn btn-primary"
							id="saveAddressBtn"
							onclick="saveAddress()"
						>
							<span class="btn-text">Save Address</span>
							<span class="btn-spinner" style="display: none;">
								<div class="loading"></div>
							</span>
						</button>
					</div>
				</div>
			</div>

			<!-- Delete Confirmation Modal -->
			<div class="modal-overlay" id="deleteModal">
				<div class="modal modal-small">
					<div class="modal-header">
						<h2>Delete Address</h2>
						<button
							class="modal-close"
							onclick="closeDeleteModal()"
						>
							&times;
						</button>
					</div>
					<div class="modal-body">
						<p>Are you sure you want to delete this address?</p>
						<p
							style="color: #dc2626; font-size: 14px; margin-top: 8px;"
						>
							This action cannot be undone.
						</p>
					</div>
					<div class="modal-footer">
						<button
							type="button"
							class="btn btn-secondary"
							onclick="closeDeleteModal()"
						>
							Cancel
						</button>
						<button
							type="button"
							class="btn btn-danger"
							id="deleteAddressBtn"
							onclick="confirmDelete()"
						>
							<span class="btn-text">Delete</span>
							<span class="btn-spinner" style="display: none;">
								<div class="loading"></div>
							</span>
						</button>
					</div>
				</div>
			</div>
		</div>

		<!-- Toast Notification -->
		<div id="toast" class="toast">
			<span id="toast-message"></span>
		</div>

		<script>
			// Address Management JavaScript
let currentAddressId = null;
let deleteAddressId = null;
let addressesData = [];

// Initialize page
document.addEventListener('DOMContentLoaded', function() {
	loadAddresses();
});

// Debounce function for API calls
function debounce(func, delay) {
	let timeout;
	return function (...args) {
		clearTimeout(timeout);
		timeout = setTimeout(() => func.apply(this, args), delay);
	};
}

// Fetch pincode details from API
const fetchPincodeDetails = debounce(async function () {
	const pincode = document.getElementById("pincode").value.trim();
	
	if (pincode.length === 6 && /^\d{6}$/.test(pincode)) {
		try {
			const res = await fetch(`https://api.postalpincode.in/pincode/${pincode}`);
			const data = await res.json();
			
			if (data[0].Status === "Success") {
				const info = data[0].PostOffice[0];
				document.getElementById("city").value = info.District;
				document.getElementById("state").value = info.State;
				document.getElementById("country").value = "India";
			} else {
				console.warn("Invalid pincode");
			}
		} catch (error) {
			console.error("Error fetching pincode info:", error);
		}
	}
}, 600);

// Handle pincode input
function handlePincodeInput() {
	fetchPincodeDetails();
}

// Load addresses from server
async function loadAddresses() {
	try {
		showLoadingSpinner(true);
		const response = await axios.get('/user/profile/get-address');
		
		if (response.data && response.data.success) {
			addressesData = response.data.addresses || [];
			renderAddresses();
		} else {
			showNotification('Failed to load addresses', 'error');
		}
	} catch (error) {
		console.error('Error loading addresses:', error);
		showNotification('Failed to load addresses', 'error');
		renderEmptyState();
	} finally {
		showLoadingSpinner(false);
	}
}

// Render addresses in DOM
function renderAddresses() {
	const container = document.getElementById('addressesContainer');
	
	if (!addressesData || addressesData.length === 0) {
		renderEmptyState();
		return;
	}
	
	let html = '';
	addressesData.forEach(address => {
		html += generateAddressCardHTML(address);
	});
	
	container.innerHTML = html;
}

// Generate HTML for a single address card
function generateAddressCardHTML(address) {
	const defaultBadge = address.isDefault ? '<span class="default-badge">Default</span>' : '';
	const cardClass = address.isDefault ? 'address-card default-address' : 'address-card';
	
	// Show "Set as Default" button only if address is not already default
	const setDefaultButton = !address.isDefault ? 
		`<button
			class="btn btn-set-default"
			onclick="setAsDefault('${address._id}')"
			title="Set as Default"
		>
			Set Default
		</button>` : '';

	return `
		<div class="${cardClass}" data-address-id="${address._id}">
			<div class="address-header">
				<div class="address-type">
					
					<div class="address-info">
						<div class="address-name">${address.addressName}</div>
						${defaultBadge}
					</div>
				</div>
				<div class="address-actions">
					<button
						class="btn-icon"
						onclick="editAddress('${address._id}')"
						title="Edit"
					>
						<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
							<path d="M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"></path>
						</svg>
					</button>
					<button
						class="btn-icon btn-danger"
						onclick="deleteAddress('${address._id}')"
						title="Delete"
					>
						<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
							<polyline points="3,6 5,6 21,6"></polyline>
							<path d="M19,6v14a2,2,0,0,1-2,2H7a2,2,0,0,1-2-2V6m3,0V4a2,2,0,0,1,2,2h4a2,2,0,0,1,2,2V6"></path>
						</svg>
					</button>
				</div>
			</div>
			<div class="address-details">
				<p class="address-name-full">${address.fullName}</p>
				<p class="address-line">${address.addressLine}</p>
				<p class="address-location">${address.city}, ${address.state} ${address.pincode}</p>
				<p class="address-country">${address.country}</p>
				${address.landmark ? `<p class="address-landmark">Near: ${address.landmark}</p>` : ''}
				<p class="address-phone">Phone: ${address.phone}</p>
				${address.createdAt ? `<p class="address-created">Added: ${formatDate(address.createdAt)}</p>` : ''}
			</div>
			${setDefaultButton ? `
				<div class="address-footer">
					${setDefaultButton}
				</div>
			` : ''}
		</div>
	`;
}

// Format date for display
function formatDate(dateString) {
	const date = new Date(dateString);
	return date.toLocaleDateString('en-US', {
		year: 'numeric',
		month: 'short',
		day: 'numeric'
	});
}

// Render empty state
function renderEmptyState() {
	const container = document.getElementById('addressesContainer');
	container.innerHTML = `
		<div class="empty-state">
			<div class="empty-icon">📍</div>
			<h3>No addresses found</h3>
			<p>Add your first address to get started</p>
			<button class="btn btn-primary" onclick="openAddModal()">
				Add Address
			</button>
		</div>
	`;
}

// Show/hide loading spinner
function showLoadingSpinner(show) {
	const spinner = document.getElementById('loadingSpinner');
	const container = document.getElementById('addressesContainer');
	
	if (show) {
		spinner.style.display = 'block';
		container.style.display = 'none';
	} else {
		spinner.style.display = 'none';
		container.style.display = 'grid';
	}
}

// Open add modal
function openAddModal() {
	currentAddressId = null;
	document.getElementById('modalTitle').textContent = 'Add New Address';
	document.getElementById('addressForm').reset();
	document.getElementById('addressId').value = '';
	document.getElementById('addressModal').classList.add('active');
}

// Edit address
function editAddress(addressId) {
	currentAddressId = addressId;
	document.getElementById('modalTitle').textContent = 'Edit Address';
	
	// Find the address data from current addresses
	const address = addressesData.find(addr => addr._id === addressId);
	
	if (address) {
		// Populate form with existing data
		document.getElementById('addressId').value = address._id;
		document.getElementById('addressName').value = address.addressName;
		document.getElementById('fullName').value = address.fullName;
		document.getElementById('phone').value = address.phone;
		document.getElementById('pincode').value = address.pincode;
		document.getElementById('addressLine').value = address.addressLine;
		document.getElementById('city').value = address.city;
		document.getElementById('state').value = address.state;
		document.getElementById('country').value = address.country;
		document.getElementById('landmark').value = address.landmark || '';
		document.getElementById('isDefault').checked = address.isDefault || false;
	}
	
	document.getElementById('addressModal').classList.add('active');
}

// Set address as default
async function setAsDefault(addressId) {
	try {
		// Show loading notification
		showNotification('Setting as default...', 'info');
		
		const response = await axios.patch(`/user/profile/address/set-default/${addressId}`);
		
		if (response.data && response.data.success) {
			showNotification('Address set as default successfully!', 'success');
			
			// Reload addresses from server to get updated data
			await loadAddresses();
		} else {
			throw new Error(response.data?.message || 'Failed to set default address');
		}
	} catch (error) {
		console.error('Error setting default address:', error);
		const message = error.response?.data?.message || error.message || 'Failed to set default address';
		showNotification(message, 'error');
	}
}

// Save address (Add or Edit)
async function saveAddress() {
	const form = document.getElementById('addressForm');
	
	// Validate form
	if (!validateForm()) {
		return;
	}
	
	// Prepare payload - only include required fields, no ID for new addresses
	const addressData = {
		addressName: document.getElementById('addressName').value.trim(),
		fullName: document.getElementById('fullName').value.trim(),
		phone: document.getElementById('phone').value.trim(),
		addressLine: document.getElementById('addressLine').value.trim(),
		city: document.getElementById('city').value.trim(),
		state: document.getElementById('state').value.trim(),
		country: document.getElementById('country').value.trim(),
		pincode: document.getElementById('pincode').value.trim(),
		isDefault: document.getElementById('isDefault').checked
	};
	
	// Add landmark only if provided
	const landmark = document.getElementById('landmark').value.trim();
	if (landmark) {
		addressData.landmark = landmark;
	}
	
	// Show loading state
	toggleButtonLoading('saveAddressBtn', true);
	
	try {
		let response;
		
		if (currentAddressId) {
			// Update existing address - include ID in URL, not payload
			response = await axios.put(`/user/profile/address/edit/${currentAddressId}`, addressData);
		} else {
			// Add new address - no ID needed, MongoDB will generate it
			response = await axios.post('/user/profile/address/add', addressData);
		}
		
		if (response.data && response.data.success) {
			showNotification(
				currentAddressId ? 'Address updated successfully!' : 'Address added successfully!',
				'success'
			);
			closeModal();
			
			// Reload addresses from server to get fresh data
			await loadAddresses();
		} else {
			throw new Error(response.data?.message || 'Failed to save address');
		}
	} catch (error) {
		console.error('Error saving address:', error);
		const message = error.response?.data?.message || error.message || 'Failed to save address';
		showNotification(message, 'error');
	} finally {
		toggleButtonLoading('saveAddressBtn', false);
	}
}

// Validate form
function validateForm() {
	const requiredFields = [
		'addressName', 'fullName', 'phone', 'addressLine',
		'city', 'state', 'country', 'pincode'
	];
	
	let isValid = true;
	
	requiredFields.forEach(fieldId => {
		const field = document.getElementById(fieldId);
		const value = field.value.trim();
		
		if (!value) {
			field.classList.add('error');
			isValid = false;
		} else {
			field.classList.remove('error');
		}
	});
	
	// Phone validation
	const phone = document.getElementById('phone').value.trim();
	if (phone && !/^\+?[\d\s-()]{10,}$/.test(phone)) {
		document.getElementById('phone').classList.add('error');
		showNotification('Please enter a valid phone number', 'error');
		isValid = false;
	}
	
	// Pincode validation
	const pincode = document.getElementById('pincode').value.trim();
	if (pincode && !/^\d{5,6}$/.test(pincode)) {
		document.getElementById('pincode').classList.add('error');
		showNotification('Please enter a valid pincode', 'error');
		isValid = false;
	}
	
	if (!isValid) {
		showNotification('Please fill in all required fields correctly', 'error');
	}
	
	return isValid;
}

// Delete address
function deleteAddress(addressId) {
	deleteAddressId = addressId;
	document.getElementById('deleteModal').classList.add('active');
}

// Confirm delete
async function confirmDelete() {
	if (!deleteAddressId) return;
	
	// Show loading state
	toggleButtonLoading('deleteAddressBtn', true);
	
	try {
		const response = await axios.delete(`/user/profile/address/delete/${deleteAddressId}`);
		
		if (response.data && response.data.success) {
			showNotification('Address deleted successfully', 'success');
			closeDeleteModal();
			
			// Reload addresses from server
			await loadAddresses();
		} else {
			throw new Error(response.data?.message || 'Failed to delete address');
		}
	} catch (error) {
		console.error('Error deleting address:', error);
		const message = error.response?.data?.message || error.message || 'Failed to delete address';
		showNotification(message, 'error');
	} finally {
		toggleButtonLoading('deleteAddressBtn', false);
	}
}

// Toggle button loading state
function toggleButtonLoading(buttonId, isLoading) {
	const btn = document.getElementById(buttonId);
	const textSpan = btn.querySelector('.btn-text');
	const spinnerSpan = btn.querySelector('.btn-spinner');
	
	if (isLoading) {
		btn.disabled = true;
		textSpan.style.display = 'none';
		spinnerSpan.style.display = 'inline-block';
	} else {
		btn.disabled = false;
		textSpan.style.display = 'inline';
		spinnerSpan.style.display = 'none';
	}
}

// Close modals
function closeModal() {
	document.getElementById('addressModal').classList.remove('active');
	currentAddressId = null;
	// Clear form validation errors
	document.querySelectorAll('.error').forEach(field => {
		field.classList.remove('error');
	});
}

function closeDeleteModal() {
	document.getElementById('deleteModal').classList.remove('active');
	deleteAddressId = null;
}

// Show toast notification
function showNotification(message, type = 'success') {
	const toast = document.getElementById('toast');
	const toastMessage = document.getElementById('toast-message');
	
	if (!toast || !toastMessage) return;
	
	toastMessage.textContent = message;
	toast.className = `toast toast-${type} show`;
	
	setTimeout(() => {
		hideToast();
	}, 4000);
}

// Hide toast
function hideToast() {
	const toast = document.getElementById('toast');
	if (toast) {
		toast.classList.remove('show');
	}
}

// Close modal when clicking outside
document.getElementById('addressModal').addEventListener('click', function(e) {
	if (e.target === this) {
		closeModal();
	}
});

document.getElementById('deleteModal').addEventListener('click', function(e) {
	if (e.target === this) {
		closeDeleteModal();
	}
});

// Close modals with Escape key
document.addEventListener('keydown', function(e) {
	if (e.key === 'Escape') {
		closeModal();
		closeDeleteModal();
	}
});

// Form validation on submit
document.getElementById('addressForm').addEventListener('submit', function(e) {
	e.preventDefault();
	saveAddress();
});

// Real-time field validation
function setupFieldValidation() {
	const fields = document.querySelectorAll('#addressForm input, #addressForm select, #addressForm textarea');
	fields.forEach(field => {
		field.addEventListener('blur', function() {
			validateField(this);
		});
		field.addEventListener('input', function() {
			// Remove error class when user starts typing
			this.classList.remove('error');
		});
	});
}

// Validate individual field
function validateField(field) {
	const value = field.value.trim();
	const isRequired = field.hasAttribute('required');
	
	if (isRequired && !value) {
		field.classList.add('error');
		return false;
	} else {
		field.classList.remove('error');
		return true;
	}
}

// Initialize field validation
setupFieldValidation();
		</script>
	</body>
</html>