<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Orders</title>
    <link rel="stylesheet" href="/styles/user/user-profile-sidebar.css" />
    <link rel="stylesheet" href="/styles/user/orders.css" />
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
      rel="stylesheet"
    />
    <style>
      /* Enhanced Toast Styles */
      .toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 10000;
      }

      .toast {
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        padding: 16px 20px;
        margin-bottom: 10px;
        min-width: 300px;
        display: flex;
        align-items: center;
        gap: 12px;
        animation: slideIn 0.3s ease-out;
        border-left: 4px solid #10b981;
      }

      .toast.error {
        border-left-color: #ef4444;
      }

      .toast.warning {
        border-left-color: #f59e0b;
      }

      .toast.info {
        border-left-color: #3b82f6;
      }

      .toast-icon {
        font-size: 18px;
      }

      .toast.success .toast-icon {
        color: #10b981;
      }

      .toast.error .toast-icon {
        color: #ef4444;
      }

      .toast.warning .toast-icon {
        color: #f59e0b;
      }

      .toast.info .toast-icon {
        color: #3b82f6;
      }

      .toast-close {
        margin-left: auto;
        background: none;
        border: none;
        font-size: 18px;
        cursor: pointer;
        color: #6b7280;
      }

      @keyframes slideIn {
        from {
          transform: translateX(100%);
          opacity: 0;
        }
        to {
          transform: translateX(0);
          opacity: 1;
        }
      }

      /* Enhanced Return Status Badge */
      .return-status {
        background: #fef3c7;
        color: #92400e;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 12px;
        font-weight: 500;
        margin-top: 8px;
        display: inline-block;
      }

      .return-status.approved {
        background: #d1fae5;
        color: #065f46;
      }

      .return-status.rejected {
        background: #fee2e2;
        color: #991b1b;
      }

      .return-status.pending {
        background: #fef3c7;
        color: #92400e;
      }

      /* Enhanced Status Badge Styles */
      .status-badge.status-return-requested {
        background-color: #fef3c7;
        color: #92400e;
      }

      .status-badge.status-return-approved {
        background-color: #d1fae5;
        color: #065f46;
      }

      .status-badge.status-return-rejected {
        background-color: #fee2e2;
        color: #991b1b;
      }

      .status-badge.status-partially-returned {
        background-color: #fef3c7;
        color: #92400e;
      }

      .status-badge.status-partially-cancelled {
        background-color: #fee2e2;
        color: #991b1b;
      }

      .status-badge.status-partially-return-approved {
        background-color: #d1fae5;
        color: #065f46;
      }
    </style>
  </head>
  <body>
    <div class="wrapper">
      <!-- Sidebar placeholder -->
      <div class="sidebar-container">
        <%- include('../../partials/user-profile-Sidebar') %>
      </div>

      <div class="container">
        <div class="page-header">
          <h1>My Orders</h1>
          <p class="subtitle">Track and manage your order history</p>
        </div>

        <div class="filters-card">
          <div class="search-section">
            <div class="search-box">
              <i class="fas fa-search"></i>
              <input
                type="text"
                id="search-input"
                placeholder="Search orders, products, brands..."
              />
            </div>
            <div class="filter-controls">
              <select id="status-filter" class="filter-select">
                <option value="all">All Orders</option>
                <option value="Placed">Placed</option>
                <option value="Shipped">Shipped</option>
                <option value="Delivered">Delivered</option>
                <option value="Cancelled">Cancelled</option>
                <option value="Partially Cancelled">Partially Cancelled</option>
                <option value="Return Requested">Return Requested</option>
                <option value="Return Approved">Return Approved</option>
                <option value="Return Rejected">Return Rejected</option>
                <option value="Partially Returned">Partially Returned</option>
                <option value="Partially Return Approved">
                  Partially Return Approved
                </option>
              </select>
              <button id="clear-filters" class="clear-btn">
                <i class="fas fa-times"></i> Clear
              </button>
            </div>
          </div>
        </div>

        <!-- Loading State -->
        <div id="loading-spinner" class="loading-container">
          <div class="spinner"></div>
          <p>Loading your orders...</p>
        </div>

        <!-- Error State -->
        <div id="error-message" class="error-container" style="display: none">
          <div class="error-card">
            <i class="fas fa-exclamation-triangle"></i>
            <h3>Unable to Load Orders</h3>
            <p id="error-text">
              Something went wrong while fetching your orders.
            </p>
            <button onclick="loadOrders()" class="retry-btn">
              <i class="fas fa-redo"></i> Try Again
            </button>
          </div>
        </div>

        <!-- Empty State -->
        <div id="empty-state" class="empty-container" style="display: none">
          <div class="empty-card">
            <i class="fas fa-shopping-cart"></i>
            <h3>No Orders Found</h3>
            <p id="empty-message">
              You haven't placed any orders yet. Start shopping to see your
              orders here!
            </p>
            <a href="/user/products" class="shop-now-btn">Start Shopping</a>
          </div>
        </div>

        <!-- Orders Container -->
        <div id="orders-container" class="orders-list" style="display: none">
          <!-- Orders will be dynamically populated here -->
        </div>
      </div>
    </div>

    <!-- Order Details Modal -->
    <div id="order-details-modal" class="modal">
      <div class="modal-content">
        <div class="modal-header">
          <h2><i class="fas fa-receipt"></i> Order Details</h2>
          <button class="modal-close" onclick="closeOrderModal()">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <div class="modal-body" id="order-details-content">
          <!-- Order details will be populated here -->
        </div>
      </div>
    </div>

    <!-- Return Reason Modal -->
    <div id="return-modal" class="modal">
      <div class="modal-content">
        <div class="modal-header">
          <h2><i class="fas fa-undo"></i> Return Item</h2>
          <button class="modal-close" onclick="closeReturnModal()">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <div class="modal-body">
          <div class="return-item-info" id="return-item-details">
            <!-- Item details will be populated here -->
          </div>
          <form id="return-form">
            <div class="form-group">
              <label for="return-reason-select">
                <i class="fas fa-comment-alt"></i> Return Reason *
              </label>
              <select id="return-reason-select" name="returnReason" required>
                <option value="">Select a reason</option>
                <option value="Damaged">Damaged</option>
                <option value="Wrong Item">Wrong Item</option>
                <option value="Quality Issue">Quality Issue</option>
                <option value="Other">Other</option>
              </select>
            </div>
            <div
              class="form-group"
              id="custom-reason-group"
              style="display: none"
            >
              <label for="custom-return-reason">
                <i class="fas fa-edit"></i> Please specify *
              </label>
              <textarea
                id="custom-return-reason"
                placeholder="Please provide a detailed reason..."
                maxlength="500"
              ></textarea>
              <div class="char-counter">
                <span id="char-count">0</span>/500 characters
              </div>
            </div>
            <div class="form-actions">
              <button
                type="button"
                onclick="closeReturnModal()"
                class="btn-cancel"
              >
                <i class="fas fa-times"></i> Cancel
              </button>
              <button type="submit" class="btn-return" id="submit-return-btn">
                <i class="fas fa-undo"></i> Submit Return Request
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <!-- Toast Container -->
    <div id="toast-container" class="toast-container"></div>

    <!-- Scripts -->
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.0/axios.min.js"></script>
    <script>
      // Order Management Frontend Logic
      let orders = [];
      let filteredOrders = [];
      let currentReturnOrder = null;
      let currentReturnItem = null;
      let isEntireOrderReturn = false;

      // Enhanced status configuration for badges
      const statusConfig = {
        Placed: { bg: "#d1e7dd", text: "#0f5132", icon: "fas fa-clock" },
        Shipped: { bg: "#cff4fc", text: "#055160", icon: "fas fa-truck" },
        Delivered: { bg: "#d1e7dd", text: "#0f5132", icon: "fas fa-box" },
        Cancelled: {
          bg: "#f8d7da",
          text: "#842029",
          icon: "fas fa-times-circle",
        },
        "Partially Cancelled": {
          bg: "#f8d7da",
          text: "#842029",
          icon: "fas fa-times-circle",
        },
        "Return Requested": {
          bg: "#fff3cd",
          text: "#664d03",
          icon: "fas fa-undo",
        },
        "Return Approved": {
          bg: "#d1fae5",
          text: "#065f46",
          icon: "fas fa-check-circle",
        },
        "Return Rejected": {
          bg: "#fee2e2",
          text: "#991b1b",
          icon: "fas fa-times-circle",
        },
        "Partially Returned": {
          bg: "#fff3cd",
          text: "#664d03",
          icon: "fas fa-undo",
        },
        "Partially Return Approved": {
          bg: "#d1fae5",
          text: "#065f46",
          icon: "fas fa-check-circle",
        },
        Pending: {
          bg: "#e2e3e5",
          text: "#41464b",
          icon: "fas fa-hourglass-half",
        },
      };

      // Initialize page when DOM is loaded
      document.addEventListener("DOMContentLoaded", function () {
        loadOrders();
        setupEventListeners();
      });

      // Setup event listeners
      function setupEventListeners() {
        document
          .getElementById("search-input")
          .addEventListener("input", filterOrders);
        document
          .getElementById("status-filter")
          .addEventListener("change", filterOrders);
        document
          .getElementById("clear-filters")
          .addEventListener("click", clearFilters);
        document
          .getElementById("return-form")
          .addEventListener("submit", handleReturnSubmission);

        // Return reason select change
        document
          .getElementById("return-reason-select")
          .addEventListener("change", function () {
            const customGroup = document.getElementById("custom-reason-group");
            if (this.value === "Other") {
              customGroup.style.display = "block";
              document.getElementById("custom-return-reason").required = true;
            } else {
              customGroup.style.display = "none";
              document.getElementById("custom-return-reason").required = false;
            }
          });

        // Character counter for custom reason
        document
          .getElementById("custom-return-reason")
          .addEventListener("input", updateCharacterCount);

        // Modal click outside to close
        window.addEventListener("click", function (event) {
          const orderModal = document.getElementById("order-details-modal");
          const returnModal = document.getElementById("return-modal");
          if (event.target === orderModal) closeOrderModal();
          if (event.target === returnModal) closeReturnModal();
        });
      }

      // Load orders from server
      async function loadOrders() {
        try {
          showLoading();
          const response = await axios.get("/user/orders/data");
          orders = response.data.orders || [];
          filteredOrders = [...orders];

          if (orders.length === 0) {
            showEmptyState();
          } else {
            displayOrders();
          }
        } catch (error) {
          console.error("Error loading orders:", error);
          showError(
            error.response?.data?.message ||
              "Failed to load orders. Please try again."
          );
        }
      }

      // Filter orders based on search and status
      function filterOrders() {
        const searchTerm = document
          .getElementById("search-input")
          .value.toLowerCase();
        const statusFilter = document.getElementById("status-filter").value;

        filteredOrders = orders.filter((order) => {
          const matchesSearch =
            !searchTerm ||
            order.orderId.toLowerCase().includes(searchTerm) ||
            order.items.some(
              (item) =>
                item.productName.toLowerCase().includes(searchTerm) ||
                item.brand.toLowerCase().includes(searchTerm)
            );

          const matchesStatus =
            statusFilter === "all" ||
            order.orderStatus === statusFilter ||
            order.items.some((item) => item.status === statusFilter);

          return matchesSearch && matchesStatus;
        });

        if (
          filteredOrders.length === 0 &&
          (searchTerm || statusFilter !== "all")
        ) {
          showEmptyState("No orders match your current filters.");
        } else if (filteredOrders.length === 0) {
          showEmptyState();
        } else {
          displayOrders();
        }
      }

      // Clear all filters
      function clearFilters() {
        document.getElementById("search-input").value = "";
        document.getElementById("status-filter").value = "all";
        filterOrders();
      }

      // Display orders in the UI
      function displayOrders() {
        const container = document.getElementById("orders-container");
        container.innerHTML = "";

        filteredOrders.forEach((order) => {
          const orderElement = createOrderElement(order);
          container.appendChild(orderElement);
        });

        hideLoading();
        container.style.display = "block";
      }

      // Create order element with accordion functionality
      function createOrderElement(order) {
        const orderDiv = document.createElement("div");
        orderDiv.className = "order-card";

        const orderStatus = getOrderStatus(order);
        const statusInfo = statusConfig[orderStatus] || statusConfig["Placed"];

        orderDiv.innerHTML = `
                <div class="order-header" onclick="toggleOrder('${order._id}')">
                    <div class="order-main-info">
                        <div class="order-details">
                            <h3 class="order-id">Order #${order.orderId}</h3>
                            <p class="order-meta">
                                <i class="fas fa-calendar"></i>
                                ${formatDate(order.createdAt)} • ${
          order.items.length
        } item${order.items.length > 1 ? "s" : ""}
                            </p>
                        </div>
                        <div class="order-status">
                            <span class="status-badge" style="background-color: ${
                              statusInfo.bg
                            }; color: ${statusInfo.text};">
                                <i class="${statusInfo.icon}"></i>
                                ${orderStatus}
                            </span>
                        </div>
                        <div class="order-total">
                            <span class="total-amount">₹${order.totalAmount.toLocaleString()}</span>
                            ${
                              order.refundedAmount > 0
                                ? `
                                <br><small style="color: #ef4444;">Refunded: ₹${order.refundedAmount.toLocaleString()}</small>
                            `
                                : ""
                            }
                        </div>
                        <div class="order-actions">
                            <button class="action-btn view-btn" onclick="event.stopPropagation(); viewOrderDetails('${
                              order.orderId
                            }')">
                                <i class="fas fa-eye"></i> View Details
                            </button>
                            <button class="action-btn download-btn" onclick="event.stopPropagation(); downloadInvoice('${
                              order.orderId
                            }')">
                                <i class="fas fa-download"></i> Invoice
                            </button>
                            ${
                              order.paymentMethod === "ONLINE" &&
                              !order.isPaid &&
                              order.orderStatus === "Placed"
                                ? `
                                <button onclick="retryPayment('${order.orderId}')" class="action-btn download-btn">
                                    Retry Payment
                                </button>
                            `
                                : ""
                            }


                            ${
                              canCancelEntireOrder(order)
                                ? `
                                <button class="action-btn cancel-btn" onclick="event.stopPropagation(); cancelEntireOrder('${order.orderId}')">
                                    <i class="fas fa-times"></i> Cancel Order
                                </button>
                            `
                                : ""
                            }
                            ${
                              canReturnEntireOrder(order)
                                ? `
                                <button class="action-btn return-btn" onclick="event.stopPropagation(); returnEntireOrder('${order.orderId}')">
                                    <i class="fas fa-undo"></i> Return Order
                                </button>
                            `
                                : ""
                            }
                        </div>
                        <div class="expand-icon">
                            <i class="fas fa-chevron-down"></i>
                        </div>
                    </div>
                </div>
                <div class="order-content" id="order-content-${order._id}">
                    <div class="products-list">
                        ${order.items
                          .map((item) => createProductCard(order, item))
                          .join("")}
                    </div>
                </div>
            `;

        return orderDiv;
      }

      async function retryPayment(orderId) {
        try {
          const res = await axios.post("/user/retry-payment", { orderId });
          const { order, user, razorpayKey } = res.data;

          const razorpayOptions = {
            key: razorpayKey,
            amount: order.amount.toString(),
            currency: order.currency,
            name: "Chronova",
            description: "Retry Order Payment",
            order_id: order.razorpayOrderId,
            handler: async function (response) {
              try {
                const verifyRes = await axios.post("/user/verify-payment", {
                  ...response,
                  orderId: order.orderId,
                });
                console.log("working");

                if (verifyRes.data.success) {
                  showToast("Payment successful!", "success");
                  window.location.href = `/user/order/conform?orderId=${order.orderId}`;
                } else {
                  showToast("Payment verification failed!", "error");
                }
              } catch (err) {
                console.error("Verification error:", err);
                showToast("Something went wrong during verification.", "error");
              }
            },
            prefill: {
              name: user.name,
              email: user.email,
              contact: user.phone,
            },
            theme: {
              color: "#6366f1",
            },
            modal: {
              ondismiss: function () {
                showToast("Payment was not completed.", "error");
              },
            },
          };

          const rzp = new Razorpay(razorpayOptions);
          rzp.open();
        } catch (err) {
          console.error("Retry error:", err);
          showToast("Unable to initiate retry. Try again later.", "error");
        }
      }

      // Create individual product card
      function createProductCard(order, item) {
        const rawStatus = item.status || "Placed";
        const statusInfo = statusConfig[rawStatus] || statusConfig["Placed"];
        const canCancel = rawStatus === "Placed";
        const canReturn = rawStatus === "Delivered" && !item.returnReason;
        // console.log(item);
        return `
                <div class="product-item">
                    <div class="product-info">
                        <div class="product-image">
                            <img src="${
                              item.image?.url ||
                              "/placeholder.svg?height=80&width=80"
                            }" 
                                 alt="${item.productName}" 
                                 onerror="this.src='/placeholder.svg?height=80&width=80'" />
                        </div>
                        <div class="product-details-text">
                            <h4 class="product-name">${item.productName}</h4>
                            <div class="product-details">
                                <span class="product-brand"><i class="fas fa-tag"></i> ${
                                  item.brand
                                }</span>
                                <span class="product-quantity"><i class="fas fa-cubes"></i> Qty: ${
                                  item.quantity
                                }</span>
                                <span class="product-price"><i class="fas fa-rupee-sign"></i> ₹${item.finalPrice?.toLocaleString()} each</span>
                            </div>
                            ${
                              item.returnReason
                                ? `
                                <div class="return-info">
                                    <i class="fas fa-info-circle"></i>
                                    Return: ${item.returnReason.substring(
                                      0,
                                      50
                                    )}${
                                    item.returnReason.length > 50 ? "..." : ""
                                  }
                                    ${getReturnStatusBadge(item)}
                                </div>
                            `
                                : ""
                            }
                            ${
                              item.returnRejectionReason
                                ? `
                                <div class="return-info">
                                    <i class="fas fa-exclamation-triangle"></i>
                                    Rejection: ${item.returnRejectionReason.substring(
                                      0,
                                      50
                                    )}${
                                    item.returnRejectionReason.length > 50
                                      ? "..."
                                      : ""
                                  }
                                </div>
                            `
                                : ""
                            }
                            ${
                              item.cancelReason
                                ? `
                                <div class="cancel-info">
                                    <i class="fas fa-info-circle"></i>
                                    Cancelled: ${item.cancelReason.substring(
                                      0,
                                      50
                                    )}${
                                    item.cancelReason.length > 50 ? "..." : ""
                                  }
                                </div>
                            `
                                : ""
                            }
                        </div>
                    </div>
                    <div class="product-actions">
                        <div class="product-status">
                            <span class="status-badge" style="background-color: ${
                              statusInfo.bg
                            }; color: ${statusInfo.text};">
                                <i class="${statusInfo.icon}"></i>
                                ${item.status}
                            </span>
                        </div>
                        <div class="product-total">
                            ₹${(item.finalPrice * item.quantity).toLocaleString()}
                        </div>
                        <div class="item-actions">
                            ${
                              canCancel
                                ? `
                                <button class="item-action-btn cancel-item-btn" onclick="cancelItem('${order.orderId}', '${item._id}')">
                                    <i class="fas fa-times"></i> Cancel
                                </button>
                            `
                                : ""
                            }
                            ${
                              canReturn
                                ? `
                                <button class="item-action-btn return-item-btn" onclick="returnItem('${order.orderId}', '${item._id}', '${item.productName}')">
                                    <i class="fas fa-undo"></i> Return
                                </button>
                            `
                                : ""
                            }
                        </div>
                    </div>
                </div>
            `;
      }

      // Get return status badge based on item status
      function getReturnStatusBadge(item) {
        if (item.status === "Return Approved") {
          return '<span class="return-status approved">✅ Approved & Refunded</span>';
        } else if (item.status === "Return Rejected") {
          return '<span class="return-status rejected">❌ Rejected</span>';
        } else if (item.status === "Return Requested") {
          return '<span class="return-status pending">⏳ Pending Admin Review</span>';
        }
        return "";
      }

      // Toggle order accordion
      function toggleOrder(orderId) {
        const content = document.getElementById(`order-content-${orderId}`);
        const icon = content.parentElement.querySelector(".expand-icon i");

        if (content.classList.contains("expanded")) {
          content.classList.remove("expanded");
          icon.classList.remove("fa-chevron-up");
          icon.classList.add("fa-chevron-down");
        } else {
          content.classList.add("expanded");
          icon.classList.remove("fa-chevron-down");
          icon.classList.add("fa-chevron-up");
        }
      }

      // Get order status based on order and items
      function getOrderStatus(order) {
        return order.orderStatus || "Placed";
      }

      // Check if entire order can be cancelled
      function canCancelEntireOrder(order) {
        return (
          order.orderStatus === "Placed" &&
          order.items.some((item) => item.status === "Placed")
        );
      }

      // Check if entire order can be returned
      function canReturnEntireOrder(order) {
        return order.items.some(
          (item) => item.status === "Delivered" && !item.returnReason
        );
      }

      // Cancel individual item
      async function cancelItem(orderId, itemId) {
        if (!confirm("Are you sure you want to cancel this item?")) return;

        try {
          await axios.post(`/user/orders/${orderId}/cancel/${itemId}`);
          showToast("Item cancelled successfully!", "success");
          await loadOrders();
        } catch (error) {
          console.error("Error cancelling item:", error);
          showToast(
            error.response?.data?.message || "Failed to cancel item",
            "error"
          );
        }
      }

      // Cancel entire order
      async function cancelEntireOrder(orderId) {
        if (!confirm("Are you sure you want to cancel this entire order?"))
          return;

        try {
          await axios.post(`/user/orders/${orderId}/cancel`);
          showToast("Order cancelled successfully!", "success");
          await loadOrders();
        } catch (error) {
          console.error("Error cancelling order:", error);
          showToast(
            error.response?.data?.message || "Failed to cancel order",
            "error"
          );
        }
      }

      // Return individual item
      function returnItem(orderId, itemId, productName) {
        currentReturnOrder = orderId;
        currentReturnItem = itemId;
        isEntireOrderReturn = false;

        const returnDetails = document.getElementById("return-item-details");
        returnDetails.innerHTML = `
                <div class="return-product-info">
                    <h4>Return Item: ${productName}</h4>
                    <p><strong>Order ID:</strong> ${orderId}</p>
                    <p class="text-muted">Your return request will be reviewed by our admin team.</p>
                </div>
            `;

        resetReturnForm();
        showReturnModal();
      }

      // Return entire order
      function returnEntireOrder(orderId) {
        currentReturnOrder = orderId;
        currentReturnItem = null;
        isEntireOrderReturn = true;

        const returnDetails = document.getElementById("return-item-details");
        returnDetails.innerHTML = `
                <div class="return-product-info">
                    <h4>Return Entire Order</h4>
                    <p><strong>Order ID:</strong> ${orderId}</p>
                    <p class="text-muted">All eligible items in this order will be marked for return.</p>
                </div>
            `;

        resetReturnForm();
        showReturnModal();
      }

      // Handle return form submission
      async function handleReturnSubmission(event) {
        event.preventDefault();

        const reasonSelect = document.getElementById("return-reason-select");
        const customReason = document.getElementById("custom-return-reason");

        let returnReason = reasonSelect.value;
        if (returnReason === "Other") {
          returnReason = customReason.value.trim();
          if (!returnReason) {
            showToast("Please provide a custom reason", "error");
            return;
          }
        }

        if (!returnReason) {
          showToast("Please select a return reason", "error");
          return;
        }

        const submitBtn = document.getElementById("submit-return-btn");
        submitBtn.disabled = true;
        submitBtn.innerHTML =
          '<i class="fas fa-spinner fa-spin"></i> Processing...';

        try {
          const url = isEntireOrderReturn
            ? `/user/orders/${currentReturnOrder}/return`
            : `/user/orders/${currentReturnOrder}/return/${currentReturnItem}`;

          await axios.post(url, { returnReason });

          showToast(
            "Return request submitted successfully! Admin will review your request.",
            "success"
          );
          closeReturnModal();
          await loadOrders();
        } catch (error) {
          console.error("Error submitting return:", error);
          showToast(
            error.response?.data?.message || "Failed to submit return request",
            "error"
          );
        } finally {
          submitBtn.disabled = false;
          submitBtn.innerHTML =
            '<i class="fas fa-undo"></i> Submit Return Request';
        }
      }

      // Download invoice
      async function downloadInvoice(orderId) {
        try {
          const response = await axios.get(
            `/user/orders/invoice/download/${orderId}`,
            {
              responseType: "blob",
            }
          );

          const blob = new Blob([response.data], { type: "application/pdf" });
          const url = window.URL.createObjectURL(blob);
          const link = document.createElement("a");
          link.href = url;
          link.download = `invoice-${orderId}.pdf`;
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
          window.URL.revokeObjectURL(url);

          showToast("Invoice downloaded successfully!", "success");
        } catch (error) {
          console.error("Error downloading invoice:", error);
          showToast(
            error.response?.data?.message || "Failed to download invoice",
            "error"
          );
        }
      }

      // View order details in modal
      async function viewOrderDetails(orderId) {
        try {
          showOrderModal();
          const response = await axios.get(`/user/orders/${orderId}`);
          const order = response.data.order;

          const modalContent = document.getElementById("order-details-content");
          modalContent.innerHTML = createOrderDetailsContent(order);
        } catch (error) {
          console.error("Error loading order details:", error);
          showToast("Failed to load order details", "error");
          closeOrderModal();
        }
      }

      // Create order details content for modal
      function createOrderDetailsContent(order) {
        return `
                <div class="order-details-grid">
                    <div class="details-section">
                        <h3><i class="fas fa-info-circle"></i> Order Information</h3>
                        <div class="detail-item">
                            <span class="label">Order ID:</span>
                            <span class="value">${order.orderId}</span>
                        </div>
                        <div class="detail-item">
                            <span class="label">Order Date:</span>
                            <span class="value">${formatDate(
                              order.createdAt
                            )}</span>
                        </div>
                        <div class="detail-item">
                            <span class="label">Order Status:</span>
                            <span class="value">
                                <span class="status-badge" style="background-color: ${
                                  statusConfig[order.orderStatus]?.bg
                                }; color: ${
          statusConfig[order.orderStatus]?.text
        };">
                                    ${order.orderStatus}
                                </span>
                            </span>
                        </div>
                        <div class="detail-item">
                            <span class="label">Payment Method:</span>
                            <span class="value">${order.paymentMethod}</span>
                        </div>
                        <div class="detail-item">
                            <span class="label">Payment Status:</span>
                            <span class="value">${order.paymentStatus}</span>
                        </div>
                        ${
                          order.refundedAmount > 0
                            ? `
                            <div class="detail-item">
                                <span class="label">Refunded Amount:</span>
                                <span class="value" style="color: #ef4444;">₹${order.refundedAmount.toLocaleString()}</span>
                            </div>
                        `
                            : ""
                        }
                    </div>

                    <div class="details-section">
                        <h3><i class="fas fa-map-marker-alt"></i> Shipping Address</h3>
                        <div class="address-block">
                            ${formatAddress(order.shippingAddress)}
                        </div>
                    </div>

                    <div class="details-section full-width">
                        <h3><i class="fas fa-shopping-bag"></i> Items Ordered (${
                          order.items.length
                        })</h3>
                        <div class="items-table">
                            <div class="table-header">
                                <span>Product</span>
                                <span>Brand</span>
                                <span>Qty</span>
                                <span>Price</span>
                                <span>Status</span>
                                <span>Total</span>
                            </div>
                            ${order.items
                              .map(
                                (item) => `
                                <div class="table-row">
                                    <div class="product-cell">
                                        <span class="product-name">${
                                          item.productName
                                        }</span>
                                        ${
                                          item.returnReason
                                            ? `
                                            <div class="return-status-info">
                                                <small>Return: ${
                                                  item.returnReason
                                                }</small>
                                                ${getReturnStatusBadge(item)}
                                            </div>
                                        `
                                            : ""
                                        }
                                        ${
                                          item.returnRejectionReason
                                            ? `
                                            <div class="return-status-info">
                                                <small style="color: #ef4444;">Rejection: ${item.returnRejectionReason}</small>
                                            </div>
                                        `
                                            : ""
                                        }
                                    </div>
                                    <span>${item.brand}</span>
                                    <span>${item.quantity}</span>
                                    <span>₹${item.price?.toLocaleString()}</span>
                                    <span>
                                        <div class="status-badge" style="background-color: ${
                                          statusConfig[item.status]?.bg
                                        }; color: ${
                                  statusConfig[item.status]?.text
                                };">
                                            ${item.status}
                                        </div>
                                    </span>
                                    <span class="item-total">₹${(
                                      item.price * item.quantity
                                    ).toLocaleString()}</span>
                                </div>
                            `
                              )
                              .join("")}
                        </div>
                    </div>

                    <div class="details-section full-width">
                        <h3><i class="fas fa-calculator"></i> Order Summary</h3>
                        <div class="summary-table">
                            <div class="summary-row">
                                <span>Subtotal:</span>
                                <span>₹${order.subtotal.toLocaleString()}</span>
                            </div>
                            ${
                              order.discount > 0
                                ? `
                                <div class="summary-row discount">
                                    <span>Discount:</span>
                                    <span>-₹${order.discount.toLocaleString()}</span>
                                </div>
                            `
                                : ""
                            }
                            ${
                              order.refundedAmount > 0
                                ? `
                                <div class="summary-row discount">
                                    <span>Refunded:</span>
                                    <span style="color: #ef4444;">-₹${order.refundedAmount.toLocaleString()}</span>
                                </div>
                            `
                                : ""
                            }
                            <div class="summary-row total">
                                <span>Total Amount:</span>
                                <span>₹${order.totalAmount.toLocaleString()}</span>
                            </div>
                        </div>
                    </div>
                </div>
            `;
      }

      // Utility Functions
      function formatDate(dateString) {
        return new Date(dateString).toLocaleDateString("en-IN", {
          year: "numeric",
          month: "long",
          day: "numeric",
        });
      }

      function formatAddress(address) {
        if (!address) return "Address not available";

        return `
                <p><strong>${address.fullName}</strong></p>
                <p>${address.addressLine}</p>
                ${address.landmark ? `<p>${address.landmark}</p>` : ""}
                <p>${address.city}, ${address.state} ${address.pincode}</p>
                <p>${address.country}</p>
                <p><i class="fas fa-phone"></i> ${address.phone}</p>
            `;
      }

      function updateCharacterCount() {
        const textarea = document.getElementById("custom-return-reason");
        const counter = document.getElementById("char-count");
        counter.textContent = textarea.value.length;
      }

      function resetReturnForm() {
        document.getElementById("return-form").reset();
        document.getElementById("custom-reason-group").style.display = "none";
        document.getElementById("custom-return-reason").required = false;
        updateCharacterCount();
      }

      // Modal Controls
      function showOrderModal() {
        document.getElementById("order-details-modal").style.display = "flex";
        document.body.style.overflow = "hidden";
      }

      function closeOrderModal() {
        document.getElementById("order-details-modal").style.display = "none";
        document.body.style.overflow = "auto";
      }

      function showReturnModal() {
        document.getElementById("return-modal").style.display = "flex";
        document.body.style.overflow = "hidden";
      }

      function closeReturnModal() {
        document.getElementById("return-modal").style.display = "none";
        document.body.style.overflow = "auto";
        currentReturnOrder = null;
        currentReturnItem = null;
        isEntireOrderReturn = false;
      }

      // UI State Management
      function showLoading() {
        document.getElementById("loading-spinner").style.display = "flex";
        document.getElementById("error-message").style.display = "none";
        document.getElementById("empty-state").style.display = "none";
        document.getElementById("orders-container").style.display = "none";
      }

      function hideLoading() {
        document.getElementById("loading-spinner").style.display = "none";
      }

      function showError(message) {
        hideLoading();
        document.getElementById("error-text").textContent = message;
        document.getElementById("error-message").style.display = "flex";
        document.getElementById("empty-state").style.display = "none";
        document.getElementById("orders-container").style.display = "none";
      }

      function showEmptyState(customMessage = null) {
        hideLoading();
        const emptyMessage = document.getElementById("empty-message");
        if (customMessage) {
          emptyMessage.textContent = customMessage;
        } else {
          emptyMessage.textContent =
            "You haven't placed any orders yet. Start shopping to see your orders here!";
        }

        document.getElementById("empty-state").style.display = "flex";
        document.getElementById("error-message").style.display = "none";
        document.getElementById("orders-container").style.display = "none";
      }

      // Toast Notifications
      function showToast(message, type = "info") {
        const toast = document.createElement("div");
        toast.className = `toast ${type}`;

        const iconMap = {
          success: "✓",
          error: "✕",
          warning: "⚠",
          info: "ℹ",
        };

        toast.innerHTML = `
                <span class="toast-icon">${iconMap[type] || "ℹ"}</span>
                <span class="toast-message">${message}</span>
                <button class="toast-close" onclick="this.parentElement.remove()">×</button>
            `;

        document.getElementById("toast-container").appendChild(toast);

        // Auto remove after 5 seconds
        setTimeout(() => {
          if (toast.parentElement) {
            toast.remove();
          }
        }, 5000);
      }
    </script>
  </body>
</html>
