<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= product.productName %> - Chronova</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <!-- Drift CSS - MUST be in head -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/drift-zoom@1.4.0/dist/drift-basic.min.css">
    <link rel="stylesheet" href="/styles/user/user-product-details.css">
</head>
<body>
    <!-- Navbar -->
    <nav class="navbar">
        <div class="nav-container">
            <div class="nav-logo">
                <a href="/user/products">
                    <span>Chronova</span>
                </a>
            </div>

            <div class="nav-search">
                
            </div>

            <div class="nav-actions">
                <a href="/user/profile/wishlist" class="nav-btn">
                    <i class="far fa-heart"></i>
                    <span class="nav-text">Wishlist</span>
                    <span class="badge" id="wishlist-count">0</span>
                </a>
                <a href="/user/profile/cart" class="nav-btn">
                    <i class="fas fa-shopping-cart"></i>
                    <span class="nav-text">Cart</span>
                    <span class="badge" id="cart-count">0</span>
                </a>
                <a href="/user/profile" class="nav-btn">
                    <i class="fas fa-user"></i>
                    <span class="nav-text">Profile</span>
                </a>
            </div>
        </div>
    </nav>

    <div class="main-container">
        <!-- Product Details -->
        <div class="product-container">
            <!-- Image Gallery - FIXED STRUCTURE -->
            <div class="product-gallery">
                <div class="thumbnail-container">
                    <% product.images.forEach((image, index) => { %>
                    <div class="thumbnail-item <%= index === 0 ? 'active' : '' %>" 
                         data-index="<%= index %>" 
                         data-image="<%= image.url %>">
                        <img src="<%= image.url %>" alt="<%= product.productName %> thumbnail <%= index + 1 %>">
                    </div>
                    <% }) %>
                </div>

                <div class="main-image-container">
                    <!-- Zoom pane will be inserted here by Drift -->
                    <img 
                        src="<%= product.images[0].url %>" 
                        id="productImage"
                        class="main-product-image"
                        alt="<%= product.productName %>"
                        data-zoom="<%= product.images[0].url %>"
                    />
                </div>
            </div>

            <!-- Product Info -->
            <div class="product-info">
                <div class="breadcrumb">
                    <a href="/user/products">products</a> / <%= product.productName %>
                </div>

                <h1 class="product-title"><%= product.productName %></h1>
                <div class="brand-name">by <%= product.brand %></div>

                <div class="rating-section">
                    <div class="stars">
                        <% for(let i = 1; i <= 5; i++) { %>
                            <i class="fa<%= i <= Math.floor(product.averageRating) ? 's' : 'r' %> fa-star"></i>
                        <% } %>
                    </div>
                    <span class="rating-text"><%= product.averageRating %> (<%= product.reviewCount %> reviews)</span>
                </div>

                <div class="price-section">
                    <span class="current-price">₹<%= product.salePrice.toLocaleString() %></span>
                    <% if(product.price !== product.salePrice) { %>
                    <span class="original-price">₹<%= product.price.toLocaleString() %></span>
                    <span class="discount-badge"><%= Math.round(((product.price - product.salePrice) / product.price) * 100) %>% OFF</span>
                    <% } %>
                    <div class="stock-status <%= product.stockQuantity > 0 ? '' : 'out-of-stock' %>">
                        <%= product.stockQuantity > 0 ? `In Stock (${product.stockQuantity} available)` : 'Out of Stock' %>
                    </div>
                </div>

                <div class="quantity-section">
                    <label class="quantity-label">Quantity:</label>
                    <div class="quantity-controls">
                        <button class="quantity-btn" id="decreaseBtn" onclick="changeQuantity(-1)">-</button>
                        <input type="number" class="quantity-input" id="quantityInput" value="1" min="1" max="<%= product.stockQuantity %>" readonly>
                        <button class="quantity-btn" id="increaseBtn" onclick="changeQuantity(1)">+</button>
                    </div>
                </div>

                <div class="action-buttons">
	<!-- Add to Cart -->
	<button
		class="btn-primary <%= product.stockQuantity === 0 ? 'btn-disabled' : '' %>"
		onclick="addToCart()"
		<%= product.stockQuantity === 0 ? 'disabled' : '' %>>
		<i class="fas fa-shopping-cart"></i>
		Add to Cart
	</button>

	<!-- Buy Now -->
	<button
		class="btn-secondary <%= product.stockQuantity === 0 ? 'btn-disabled-secondary' : '' %>"
		onclick="buyNow()"
		<%= product.stockQuantity === 0 ? 'disabled' : '' %>>
		<i class="fas fa-bolt"></i>
		Buy Now
	</button>

	<!-- Wishlist -->
	<button class="wishlist-btn" onclick="toggleWishlist()">
		<i id="wishlist-icon" class="far fa-heart <%= isInWishlist ? 'fas filled' : '' %>"></i>
	</button>
</div>

            </div>

            <!-- Product Details Tabs -->
            <div class="product-details">
                <div class="tabs">
                    <button class="tab active" onclick="showTab('description')">Description</button>
                    <button class="tab" onclick="showTab('specifications')">Specifications</button>
                    <button class="tab" onclick="showTab('reviews')">Reviews</button>
                </div>

                <div class="tab-content active" id="description">
                    <div class="description-content">
                        <p><%= product.description %></p>
                    </div>
                </div>

                <div class="tab-content" id="specifications">
                    <div class="spec-grid">
                        <div class="spec-item">
                            <span class="spec-label">Brand:</span>
                            <span class="spec-value"><%= product.brand %></span>
                        </div>
                        <div class="spec-item">
                            <span class="spec-label">Product Type:</span>
                            <span class="spec-value"><%= product.productType %></span>
                        </div>
                        <div class="spec-item">
                            <span class="spec-label">Strap Type:</span>
                            <span class="spec-value"><%= product.strapType %></span>
                        </div>
                        <div class="spec-item">
                            <span class="spec-label">Color:</span>
                            <span class="spec-value"><%= product.color %></span>
                        </div>
                        <div class="spec-item">
                            <span class="spec-label">Dial Size:</span>
                            <span class="spec-value"><%= product.dialSize %>mm</span>
                        </div>
                        <div class="spec-item">
                            <span class="spec-label">Dial Shape:</span>
                            <span class="spec-value"><%= product.dialShape %></span>
                        </div>
                        <div class="spec-item">
                            <span class="spec-label">Movement:</span>
                            <span class="spec-value"><%= product.movement %></span>
                        </div>
                        <div class="spec-item">
                            <span class="spec-label">Water Resistance:</span>
                            <span class="spec-value"><%= product.waterResistance %></span>
                        </div>
                        <div class="spec-item">
                            <span class="spec-label">Warranty:</span>
                            <span class="spec-value"><%= product.warranty %></span>
                        </div>
                        <div class="spec-item">
                            <span class="spec-label">Weight:</span>
                            <span class="spec-value"><%= product.weight %>g</span>
                        </div>
                        <div class="spec-item">
                            <span class="spec-label">SKU:</span>
                            <span class="spec-value"><%= product.sku %></span>
                        </div>
                    </div>
                </div>

                <div class="tab-content" id="reviews">
                    <div class="reviews-content">
                        <p>Customer reviews will be displayed here.</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Featured Products Section -->
        <div class="featured-section">
            <h2 class="section-title">You May Also Like</h2>
            <div class="featured-grid" id="featuredGrid">
                <div class="loading">
                    <div class="spinner"></div>
                    Loading featured products...
                </div>
            </div>
        </div>
    </div>

    <!-- jQuery FIRST -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <!-- Drift.js SECOND -->
    <script src="https://cdn.jsdelivr.net/npm/drift-zoom@1.4.0/dist/Drift.min.js"></script>

    <script>
    // Global variables
    let currentQuantity = 1;
    let currentImageIndex = 0;
    let productData = null;
    let featuredProducts = [];
    let isInWishlist = false;
    let cartCount = 0;
    let wishlistCount = 0;
    let driftInstance = null;

    // FIXED ZOOM FUNCTIONALITY
    $(document).ready(function() {
        // Initialize zoom for the first image
        initializeZoom();
        
        // Handle thumbnail clicks
        $('.thumbnail-item').on('click', function(e) {
            e.preventDefault();
            
            // Remove active class from all thumbnails
            $('.thumbnail-item').removeClass('active');
            
            // Add active class to clicked thumbnail
            $(this).addClass('active');
            
            // Get the new image URL
            const newImageUrl = $(this).data('image');
            
            // Update main image
            const $mainImage = $('#productImage');
            $mainImage.attr('src', newImageUrl);
            $mainImage.attr('data-zoom', newImageUrl);
            
            // Destroy existing drift instance
            if (driftInstance) {
                driftInstance.destroy();
                driftInstance = null;
            }
            
            // Wait for image to load then reinitialize
            $mainImage.off('load.zoom').on('load.zoom', function() {
                setTimeout(initializeZoom, 100);
            });
            
            // Trigger load event if image is already cached
            if ($mainImage[0].complete) {
                setTimeout(initializeZoom, 100);
            }
        });
    });

    function initializeZoom() {
        const productImage = document.getElementById('productImage');
        
        if (productImage && typeof Drift !== 'undefined') {
            try {
                driftInstance = new Drift(productImage, {
                    paneContainer: document.querySelector('.main-image-container'),
                    inlinePane: false,
                    inlineOffsetY: 0,
                    inlineOffsetX: 10,
                    containInline: false,
                    hoverBoundingBox: true,
                    touchDelay: 150,
                    hoverDelay: 150,
                    zoomFactor: 2.5,
                    paneWidth: 300,
                    paneHeight: 300,
                    showWhitespaceAtEdges: false,
                    injectBaseStyles: true,
                    handleTouch: true,
                    onShow: function() {
                        console.log('Zoom activated');
                    },
                    onHide: function() {
                        console.log('Zoom deactivated');
                    }
                });
            } catch (error) {
                console.error('Error initializing Drift:', error);
            }
        }
    }

    // Handle window resize
    $(window).on('resize', function() {
        if (driftInstance) {
            driftInstance.destroy();
            driftInstance = null;
            setTimeout(initializeZoom, 200);
        }
    });

    // Initialize page when DOM is loaded
    document.addEventListener('DOMContentLoaded', function() {
        initializePage();
        loadUserCounts();
        loadFeaturedProducts();
        setupEventListeners();
    });

    // Initialize page functionality
    function initializePage() {
        const pathParts = window.location.pathname.split('/');
        const productId = pathParts[pathParts.length - 1];
        
        loadProductData(productId);
        setupQuantityControls();
        setupTabs();
    }

    // Setup event listeners
    function setupEventListeners() {
        const searchInput = document.getElementById('searchInput');
        if (searchInput) {
            searchInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    performSearch();
                }
            });
        }

        window.addEventListener('resize', handleResize);
    }

    // Quantity Control Functions
    function setupQuantityControls() {
        const quantityInput = document.getElementById('quantityInput');
        const decreaseBtn = document.getElementById('decreaseBtn');
        const increaseBtn = document.getElementById('increaseBtn');
        
        if (quantityInput) {
            quantityInput.addEventListener('change', function() {
                validateQuantity();
            });
        }
        
        updateQuantityButtons();
    }

    function changeQuantity(delta) {
        const quantityInput = document.getElementById('quantityInput');
        if (!quantityInput) return;
        
        const currentValue = parseInt(quantityInput.value) || 1;
        const newValue = Math.max(1, Math.min(currentValue + delta, parseInt(quantityInput.max) || 99));
        
        quantityInput.value = newValue;
        currentQuantity = newValue;
        updateQuantityButtons();
    }


    

    function validateQuantity() {
        const quantityInput = document.getElementById('quantityInput');
        if (!quantityInput) return;
        
        const value = parseInt(quantityInput.value) || 1;
        const max = parseInt(quantityInput.max) || 99;
        const validValue = Math.max(1, Math.min(value, max));
        
        quantityInput.value = validValue;
        currentQuantity = validValue;
        updateQuantityButtons();
    }

    function updateQuantityButtons() {
        const quantityInput = document.getElementById('quantityInput');
        const decreaseBtn = document.getElementById('decreaseBtn');
        const increaseBtn = document.getElementById('increaseBtn');
        
        if (!quantityInput) return;
        
        const value = parseInt(quantityInput.value) || 1;
        const max = parseInt(quantityInput.max) || 99;
        
        if (decreaseBtn) {
            decreaseBtn.disabled = value <= 1;
        }
        
        if (increaseBtn) {
            increaseBtn.disabled = value >= max;
        }
    }

    // Tab Functions
    function setupTabs() {
        const tabs = document.querySelectorAll('.tab');
        tabs.forEach(tab => {
            tab.addEventListener('click', function() {
                const tabName = tab.textContent.toLowerCase().replace(' ', '');
                showTab(tabName);
            });
        });
    }

    function showTab(tabName) {
        const tabContents = document.querySelectorAll('.tab-content');
        tabContents.forEach(content => {
            content.classList.remove('active');
        });
        
        const tabs = document.querySelectorAll('.tab');
        tabs.forEach(tab => {
            tab.classList.remove('active');
        });
        
        const selectedContent = document.getElementById(tabName);
        if (selectedContent) {
            selectedContent.classList.add('active');
        }
        
        const selectedTab = Array.from(tabs).find(tab => 
            tab.textContent.toLowerCase().replace(' ', '') === tabName
        );
        if (selectedTab) {
            selectedTab.classList.add('active');
        }
    }

    // API Functions
    async function loadProductData(productId) {
        try {
            const response = await fetch(`/user/product/${productId}`);
            if (response.ok) {
                productData = await response.json();
            }
        } catch (error) {
            console.error('Error loading product data:', error);
        }
    }

    async function loadUserCounts() {
        try {
            const cartResponse = await fetch('/api/user/cart/count');
            if (cartResponse.ok) {
                const cartData = await cartResponse.json();
                updateCartCount(cartData.count || 0);
            }
            
            const wishlistResponse = await fetch('/api/user/wishlist/count');
            if (wishlistResponse.ok) {
                const wishlistData = await wishlistResponse.json();
                updateWishlistCount(wishlistData.count || 0);
            }
        } catch (error) {
            console.error('Error loading user counts:', error);
        }
    }

    async function loadFeaturedProducts() {
        try {
            const pathParts = window.location.pathname.split('/');
            const productId = pathParts[pathParts.length - 1];
            
            const response = await fetch(`/user/product/filter/${productId}`);
            if (response.ok) {
                const data = await response.json();
                featuredProducts = data.featuredProducts || [];
                displayFeaturedProducts();
            }
        } catch (error) {
            console.error('Error loading featured products:', error);
            displayFeaturedProductsError();
        }
    }

    // Action Functions
    async function addToCart() {
        try {
            const pathParts = window.location.pathname.split('/');
            const productId = pathParts[pathParts.length - 1];
            
            const response = await fetch('/api/user/cart/add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    productId: productId,
                    quantity: currentQuantity
                })
            });
            
            if (response.ok) {
                const result = await response.json();
                showNotification('Product added to cart successfully!', 'success');
                updateCartCount(result.cartCount || cartCount + currentQuantity);
            } else {
                const error = await response.json();
                showNotification(error.message || 'Failed to add product to cart', 'error');
            }
        } catch (error) {
            console.error('Error adding to cart:', error);
            showNotification('An error occurred while adding to cart', 'error');
        }
    }

    async function buyNow() {
        try {
            const pathParts = window.location.pathname.split('/');
            const productId = pathParts[pathParts.length - 1];
            
            const addToCartResponse = await fetch('/api/user/cart/add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    productId: productId,
                    quantity: currentQuantity
                })
            });
            
            if (addToCartResponse.ok) {
                window.location.href = '/checkout';
            } else {
                const error = await addToCartResponse.json();
                showNotification(error.message || 'Failed to proceed to checkout', 'error');
            }
        } catch (error) {
            console.error('Error in buy now:', error);
            showNotification('An error occurred while processing your request', 'error');
        }
    }

    async function toggleWishlist() {
    try {
        const pathParts = window.location.pathname.split('/');
        const productId = pathParts[pathParts.length - 1];

        const response = await fetch('/user/profile/wishlist/toggle', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ productId })
        });

        const data = await response.json();

        if (response.ok) {
            const action = data.action || 'updated'; // expected: 'added' or 'removed'
            const message = action === 'added' ? 'Product added to wishlist!' : 'Product removed from wishlist!';
            showNotification(message, 'success');

            // Toggle heart icon on product page
            const heartIcon = document.querySelector('#wishlist-icon');
            if (heartIcon) {
                heartIcon.classList.toggle('fas', action === 'added');
                heartIcon.classList.toggle('far', action !== 'added');
                heartIcon.classList.toggle('filled', action === 'added'); // optional for styling
            }

            updateWishlistCount(); 
        } else {
            showNotification(data.message || 'Failed to update wishlist', 'error');
        }
    } catch (error) {
        console.error('Error toggling wishlist:', error);
        showNotification('An error occurred while updating wishlist', 'error');
    }
}


    function performSearch() {
        const searchInput = document.getElementById('searchInput');
        if (searchInput && searchInput.value.trim()) {
            const searchQuery = encodeURIComponent(searchInput.value.trim());
            window.location.href = `/search?q=${searchQuery}`;
        }
    }

    function displayFeaturedProducts() {
        updateWishlistCount()
        const featuredGrid = document.getElementById('featuredGrid');
        if (!featuredGrid || !featuredProducts.length) {
            displayFeaturedProductsError();
            return;
        }
        
        const productsToShow = featuredProducts.slice(0, 4);
        const html = productsToShow.map(product => createFeaturedProductCard(product)).join('');
        featuredGrid.innerHTML = html;
    }

    function createFeaturedProductCard(product) {
    const discountPercentage = product.price !== product.salePrice 
        ? Math.round(((product.price - product.salePrice) / product.price) * 100)
        : 0;

    const heartClass = product.isInWishlist ? 'fas filled' : 'far';
    const heartStyle = product.isInWishlist ? 'color: #e11d48;' : ''; // optional: use a red color when active

    return `
        <div class="featured-card" onclick="goToProduct('${product._id}')">
            <img src="${product.images[0]?.url || '/images/placeholder.jpg'}" alt="${product.productName}" class="featured-image">
            <div class="featured-info">
                <h3 class="featured-title">${product.productName}</h3>
                <div class="featured-brand">${product.brand}</div>
                <div class="featured-price">
                    <span class="featured-current-price">₹${product.salePrice.toLocaleString()}</span>
                    ${product.price !== product.salePrice ? `
                        <span class="featured-original-price">₹${product.price.toLocaleString()}</span>
                        <span class="featured-discount">${discountPercentage}% OFF</span>
                    ` : ''}
                </div>
                <div class="featured-actions">
                    <button class="featured-btn featured-btn-primary" onclick="event.stopPropagation(); addFeaturedToCart('${product._id}')">
                        <i class="fas fa-shopping-cart"></i>
                        Add to Cart
                    </button>
                    <button class="featured-btn featured-btn-secondary" onclick="event.stopPropagation(); toggleFeaturedWishlist('${product._id}')">
                        <i id="featured-heart-${product._id}" class="${heartClass} fa-heart" style="${heartStyle}"></i>
                    </button>
                </div>
            </div>
        </div>
    `;
}


    function displayFeaturedProductsError() {
        const featuredGrid = document.getElementById('featuredGrid');
        if (featuredGrid) {
            featuredGrid.innerHTML = '<div class="loading">No featured products available</div>';
        }
    }

    function goToProduct(productId) {
        window.location.href = `/user/product/${productId}`;
    }

    async function addFeaturedToCart(productId) {
        try {
            const response = await fetch('/api/user/cart/add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    productId: productId,
                    quantity: 1
                })
            });
            
            if (response.ok) {
                const result = await response.json();
                showNotification('Product added to cart!', 'success');
                updateCartCount(result.cartCount || cartCount + 1);
            } else {
                const error = await response.json();
                showNotification(error.message || 'Failed to add to cart', 'error');
            }
        } catch (error) {
            console.error('Error adding featured product to cart:', error);
            showNotification('An error occurred while adding to cart', 'error');
        }
    }

async function toggleFeaturedWishlist(productId) {
    try {
        const response = await fetch('/user/profile/wishlist/toggle', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ productId })
        });

        const result = await response.json();

        if (response.ok && result.success) {
            const isAdded = result.action === 'added';
            showNotification(
                result.message || (isAdded ? 'Added to wishlist!' : 'Removed from wishlist!'),
                'success'
            );

            updateWishlistCount();

            const heartIcon = document.querySelector(`#featured-heart-${productId}`);
            if (heartIcon) {
                heartIcon.classList.toggle('fas', isAdded);
                heartIcon.classList.toggle('far', !isAdded);
                heartIcon.classList.toggle('filled', isAdded);
                heartIcon.style.color = isAdded ? '#e11d48' : '';
            }
        } else {
            showNotification(result.message || 'Failed to update wishlist', 'error');
        }
    } catch (error) {
        console.error('Error toggling featured product wishlist:', error);
        showNotification('An error occurred while updating wishlist', 'error');
    }
}



    function updateCartCount(count) {
        cartCount = count;
        const cartCountElement = document.getElementById('cart-count');
        if (cartCountElement) {
            cartCountElement.textContent = count;
            cartCountElement.style.display = count > 0 ? 'flex' : 'none';
        }
    }

    async function updateWishlistCount() {
        try {
            const response = await fetch('/user/profile/wishlist/count');
            if (!response.ok) throw new Error();

            const data = await response.json();
            const wishlistCountElement = document.getElementById('wishlist-count');

            if (wishlistCountElement) {
            const count = data.wishlistCount  || 0;
            // console.log(count);
            wishlistCountElement.textContent = count;
            wishlistCountElement.style.display = count > 0 ? 'flex' : 'none';
            }
        } catch (error) {
            console.error('Error updating wishlist count:', error);
        }
    }


    function updateWishlistButton() {
        const wishlistBtn = document.querySelector('.wishlist-btn i');
        if (wishlistBtn) {
            wishlistBtn.className = isInWishlist ? 'fas fa-heart' : 'far fa-heart';
        }
    }

    function showNotification(message, type = 'info') {
        const existingNotification = document.querySelector('.notification');
        if (existingNotification) {
            existingNotification.remove();
        }
        
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : '#3b82f6'};
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 500;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            z-index: 10000;
            transform: translateX(100%);
            transition: transform 0.3s ease;
            max-width: 300px;
        `;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
        }, 100);
        
        setTimeout(() => {
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 300);
        }, 3000);
    }

    function handleResize() {
        if (driftInstance && window.innerWidth <= 768) {
            driftInstance.destroy();
            driftInstance = null;
        } else if (!driftInstance && window.innerWidth > 768) {
            setTimeout(initializeZoom, 100);
        }
    }

    function formatPrice(price) {
        return new Intl.NumberFormat('en-IN', {
            style: 'currency',
            currency: 'INR',
            minimumFractionDigits: 0
        }).format(price);
    }

    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
    </script>
</body>
</html>