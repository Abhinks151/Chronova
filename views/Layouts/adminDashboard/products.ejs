<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Products Management</title>
  <link rel="stylesheet" href="/styles/dashboard.css">
  <link rel="stylesheet" href="/styles/admin-products.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.0/axios.min.js"></script>
</head>
<body>
  <%- include('../../partials/sidebar') %>

  <div class="container">
    <!-- Page Header Section - Contains title and main action buttons -->
    <div class="page-header">
      <h1 class="page-title">Products Management</h1>
      <div class="header-actions">
        <div class="search-container">
          <input type="text" id="searchInput" class="search-input" placeholder="Search products, brands, SKU..." />
        </div>
        <button class="btn btn-primary" onclick="handleSearch()">Search</button>
        <button class="btn btn-secondary" onclick="clearFilters()">Clear</button>
        <button class="btn btn-success" onclick="addNewProduct()">+ Add Product</button>
      </div>
    </div>

    <!-- Filters Section - Contains all filtering and sorting options -->
    <div class="filters-section">
      <span class="filter-label">Filter By:</span>
      
      <!-- Category Filter Dropdown -->
      <div class="filter-group">
  <label class="filter-label">Category:</label>
  <select id="categoryFilter" class="filter-select">
    <option value="All">All Categories</option>
    <% categories.forEach(category => { %>
      <option value="<%= category._id %>"><%= category.categoryName %></option>
    <% }) %>
  </select>
      </div>


      <!-- Brand Filter Dropdown -->
      <div class="filter-group">
        <label class="filter-label">Brand:</label>
        <select id="brandFilter" class="filter-select">
          <option value="All">All Brands</option>
          <% brands.forEach(brand => { %>
            <option value="<%= brand %>"><%= brand %></option>
          <% }) %>
        </select>
      </div>

      <!-- Price Range Filter Inputs -->
      <div class="filter-group">
        <label class="filter-label">Price Range:</label>
        <input type="number" id="minPrice" class="price-input" placeholder="Min ₹" />
        <input type="number" id="maxPrice" class="price-input" placeholder="Max ₹" />
      </div>

      <!-- Sort Buttons for different sorting options -->
      <div class="sort-group">
        <button class="sort-btn" data-sort="name-asc">A-Z</button>
        <button class="sort-btn" data-sort="name-desc">Z-A</button>
        <button class="sort-btn" data-sort="price-asc">₹ Low</button>
        <button class="sort-btn" data-sort="price-desc">₹ High</button>
        <button class="sort-btn" data-sort="stock-low">Low Stock</button>
      </div>
    </div>

    <!-- Products Table Container - Main data display area -->
    <div class="table-container">
      <!-- Loading Indicator - Shows while fetching data -->
      <div class="loading" id="loadingIndicator">
        <div class="spinner"></div>
        <div>Loading products...</div>
      </div>
      
      <!-- Products Table - Main data table with only View action -->
      <table class="products-table" id="productsTable" style="display:none;">
        <thead>
          <tr>
            <th>Product</th>
            <th>SKU</th>
            <th>Category</th>
            <th>Brand</th>
            <th>Price</th>
            <th>Stock</th>
            <th>Status</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody id="productsTableBody">
          <!-- Products will be populated here dynamically -->
        </tbody>
      </table>

      <!-- No Products Message - Shows when no data found -->
      <div class="no-products" id="noProductsMessage" style="display:none;">
        No products found matching your criteria.
      </div>
    </div>

    <!-- Pagination Container - Page navigation controls -->
    <div class="pagination-container">
      <div class="pagination-info" id="paginationInfo">
        Showing 0 - 0 of 0 products
      </div>
      
      <div class="pagination-right">
        <!-- Page Size Selector -->

        
        <!-- Page Navigation Buttons -->
        <div class="pagination-controls">
          <button class="pagination-btn" id="prevPageBtn" onclick="goToPrevPage()">← Previous</button>
          <button class="pagination-btn" id="nextPageBtn" onclick="goToNextPage()">Next →</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Product Details Modal - Enhanced with specifications and all actions -->
  <div id="productModal" class="modal">
    <div class="modal-content modal-large">
      <div class="modal-header">
        <h2>Product Details</h2>
        <span class="close" onclick="closeModal('productModal')">&times;</span>
      </div>
      <div class="modal-body" id="modalBody">
        <!-- Dynamic content will be loaded here -->
      </div>
      <div class="modal-footer" id="modalFooter">
        <!-- Action buttons will be populated here -->
      </div>
    </div>
  </div>

  <!-- Block/Unblock Confirmation Modal -->
  <div id="blockModal" class="modal">
    <div class="modal-content modal-small">
      <div class="modal-header">
        <h2 id="blockModalTitle">Confirm Action</h2>
        <span class="close" onclick="closeModal('blockModal')">&times;</span>
      </div>
      <div class="modal-body">
        <p id="blockModalMessage"></p>
      </div>
      <div class="modal-footer">
        <button class="btn btn-secondary" onclick="closeModal('blockModal')">Cancel</button>
        <button class="btn" id="blockConfirmBtn" onclick="confirmBlockAction()">Confirm</button>
      </div>
    </div>
  </div>

  <!-- Delete Confirmation Modal -->
  <div id="deleteModal" class="modal">
    <div class="modal-content modal-small">
      <div class="modal-header">
        <h2>Confirm Delete</h2>
        <span class="close" onclick="closeModal('deleteModal')">&times;</span>
      </div>
      <div class="modal-body">
        <p>Are you sure you want to delete this product?</p>
        <p class="warning-text">This action cannot be undone.</p>
      </div>
      <div class="modal-footer">
        <button class="btn btn-secondary" onclick="closeModal('deleteModal')">Cancel</button>
        <button class="btn btn-danger" onclick="confirmDeleteAction()">Delete</button>
      </div>
    </div>
  </div>

  <!-- Success/Error Toast Notification -->
  <div id="toast" class="toast"></div>
  <script>
    let allProducts = <%- JSON.stringify(products) %>
    // let allProducts = JSON.parse(stringProduct);
    console.log(allProducts)
    let currentProducts = [...allProducts];
    let specifications =' <%= JSON.stringify(products.specifications) %>';
    
    let isLoading = false;
    let currentSort = '';
    let pageSize = 5;
     let totalProducts = Number('<%= totalCount %>');
     let currentPage = Number('<%= currentPage %>');  
    let pendingAction = null;
    let currentProductId = null;

    // ==================== INITIALIZATION ====================
    // Initialize application when DOM is fully loaded
    document.addEventListener('DOMContentLoaded', () => {
      renderProducts();
      setupEventListeners();
      updatePagination();
    });

    // ==================== EVENT LISTENERS SETUP ====================
    // Setup all event listeners for user interactions


    function setupEventListeners() {
      // Search input with Enter key support
      document.getElementById('searchInput').addEventListener('keyup', (e) => {
        if (e.key === 'Enter') handleSearch();
      });
      
      // Filter change listeners
      document.getElementById('categoryFilter').addEventListener('change', handleFilters);
      document.getElementById('brandFilter').addEventListener('change', handleFilters);
      document.getElementById('minPrice').addEventListener('input', debounce(handleFilters, 500));
      document.getElementById('maxPrice').addEventListener('input', debounce(handleFilters, 500));
      // document.getElementById('pageSizeSelect').addEventListener('change', handlePageSizeChange);

      // Sort button listeners
      document.querySelectorAll('.sort-btn').forEach(btn => {
        btn.addEventListener('click', () => {
          // Remove active class from all buttons
          document.querySelectorAll('.sort-btn').forEach(b => b.classList.remove('active'));
          // Add active class to clicked button
          btn.classList.add('active');
          currentSort = btn.dataset.sort;
          handleFilters();
        });
      });

      // Modal close on outside click
      window.addEventListener('click', (e) => {
        if (e.target.classList.contains('modal')) {
          closeModal(e.target.id);
        }
      });
    }

    // ==================== UTILITY FUNCTIONS ====================
    // Debounce function to limit API calls during typing
    function debounce(func, delay) {
      let timeout;
      return (...args) => {
        clearTimeout(timeout);
        timeout = setTimeout(() => func(...args), delay);
      };
    }

    // Format price in Indian currency format
    function formatPrice(price) {
      return new Intl.NumberFormat('en-IN', {
        style: 'decimal',
        minimumFractionDigits: 2
      }).format(price);
    }

    // Format date in readable format
    function formatDate(dateString) {
      if (!dateString) return 'N/A';
      const date = new Date(dateString);
      return date.toLocaleDateString('en-IN', {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
      });
    }

    // Show toast notification
    function showToast(message, type = 'success') {
      const toast = document.getElementById('toast');
      toast.textContent = message;
      toast.className = `toast toast-${type} show`;
      
      setTimeout(() => {
        toast.classList.remove('show');
      }, 3000);
    }

    // ==================== SEARCH AND FILTER FUNCTIONS ====================
    // Handle search button click
    function handleSearch() {
      handleFilters();
    }

    // Clear all filters and reset to original state
    function clearFilters() {
      document.getElementById('searchInput').value = '';
      document.getElementById('categoryFilter').value = 'All';
      document.getElementById('brandFilter').value = 'All';
      document.getElementById('minPrice').value = '';
      document.getElementById('maxPrice').value = '';
      document.querySelectorAll('.sort-btn').forEach(b => b.classList.remove('active'));
      currentSort = '';
      currentPage = 1;
      currentProducts = [...allProducts];
      renderProducts();
      updatePagination();
    }

    // Handle all filters and sorting
    async function handleFilters() {
      if (isLoading) return;

      const filters = {
        search: document.getElementById('searchInput').value,
        category: document.getElementById('categoryFilter').value,
        brand: document.getElementById('brandFilter').value,
        minPrice: document.getElementById('minPrice').value,
        maxPrice: document.getElementById('maxPrice').value,
        
        sort: currentSort,
        page: currentPage,
        pagesize: pageSize
      };

      await fetchFilteredProducts(filters);
    }

    // Fetch filtered products from server
    async function fetchFilteredProducts(filters) {
  isLoading = true;
  showLoading();

  try {
    const params = new URLSearchParams();

    Object.keys(filters).forEach(key => {
      if (filters[key] !== undefined && filters[key] !== null && filters[key] !== '') {
        params.append(key, filters[key]);
      }
    });

    params.append('page', currentPage);
    params.append('limit', pageSize);

    const response = await axios.get(`/admin/products/filter?${params}`);
    const data = response.data;

    console.log('Fetched product data:', data);


    if (data.success) {
      currentProducts = response.data.products || [];
      totalProducts = response.data.totalCount || currentProducts.length;
      // window.location.href = response.data.redirect;
      renderProducts();
      updatePagination();
    } else {
      showError('Failed to load products');
    }
  } catch (error) {
    showError('Server error while fetching products.');
    console.error('Filter fetch error:', error);
  } finally {
    isLoading = false;
  }
}



    // ==================== RENDERING FUNCTIONS ====================
    // Show loading indicator
    function showLoading() {
      document.getElementById('loadingIndicator').style.display = 'block';
      document.getElementById('productsTable').style.display = 'none';
      document.getElementById('noProductsMessage').style.display = 'none';
    }

    // Show error message
    function showError(message) {
      document.getElementById('loadingIndicator').style.display = 'none';
      document.getElementById('productsTable').style.display = 'none';
      document.getElementById('noProductsMessage').style.display = 'block';
      document.getElementById('noProductsMessage').textContent = message;
    }

    // Render products table with only View button
    function renderProducts() {
      const loadingEl = document.getElementById('loadingIndicator');
      const tableEl = document.getElementById('productsTable');
      const noProductsEl = document.getElementById('noProductsMessage');
      const tbody = document.getElementById('productsTableBody');
      
      loadingEl.style.display = 'none';
      
      if (!currentProducts.length) {
        tableEl.style.display = 'none';
        noProductsEl.style.display = 'block';
        return;
      }

      noProductsEl.style.display = 'none';
      tableEl.style.display = 'table';

      // Generate table rows with only View button
      tbody.innerHTML = currentProducts.map(product => `
        <tr data-id="${product._id}">
          <td class="product-cell">
            <img src="${product.images && product.images[0] ? product.images[0].url : '/images/placeholder-watch.jpg'}" 
                 class="product-thumb" 
                 onerror="this.src='/images/placeholder-watch.jpg'" 
                 alt="${product.productName}">
            <div class="product-info">
              <div class="product-name">${product.productName}</div>
              <div class="product-desc">${product.description ? product.description.substring(0, 50) + '...' : 'No description'}</div>
            </div>
          </td>
          <td><code class="sku-code">${product.sku}</code></td>
          <td>
            ${Array.isArray(product.category)
              ? product.category.map(cat => cat.categoryName).join(' > ')
              : 'Uncategorized'}
          </td>
          <td>${product.brand}</td>
          <td class="price-cell">
            <div class="sale-price">₹${formatPrice(product.salePrice)}</div>
            ${product.price !== product.salePrice ? 
              `<div class="original-price">₹${formatPrice(product.price)}</div>` : ''}
          </td>
          <td>
            <span class="stock-badge ${product.stockQuantity < 10 ? 'stock-low' : 'stock-good'}">
              ${product.stockQuantity}
            </span>
          </td>
          <td>
            <span class="status-badge ${product.isBlocked ? 'status-blocked' : 'status-active'}">
              ${product.isBlocked ? 'Blocked' : 'Active'}
            </span>
          </td>
          <td class="actions-cell">
            <button class="action-btn btn-info" onclick="viewProductDetails('${product._id}')" title="View Details">
              View
            </button>
          </td>
        </tr>
      `).join('');
    }

    // ==================== PAGINATION FUNCTIONS ====================
    // Update pagination information and button states
function updatePagination() {
  const totalPages = Math.ceil(totalProducts / pageSize);
  const startItem = ((currentPage - 1) * pageSize) + 1;
  const endItem = Math.min(currentPage * pageSize, totalProducts);
console.log({ totalProducts, pageSize, currentPage });

  document.getElementById('paginationInfo').textContent = 
    `Showing ${startItem} - ${endItem} of ${totalProducts} products`;

  document.getElementById('prevPageBtn').disabled = currentPage <= 1;
  document.getElementById('nextPageBtn').disabled = currentPage >= totalPages;
}


    // Navigate to previous page
    function goToPrevPage() {
      if (currentPage > 1) {
        currentPage--;
        handleFilters();
      }
    }

    // Navigate to next page
    function goToNextPage() {
      const totalPages = Math.ceil(totalProducts / pageSize);
      if (currentPage < totalPages) {
        currentPage++;
        handleFilters();
      }
    }

    // Handle page size change
    function handlePageSizeChange() {
      pageSize = parseInt(document.getElementById('pageSizeSelect').value);
      currentPage = 1;
      handleFilters();
    }

    // ==================== MODAL FUNCTIONS ====================
    // Close modal and reset pending actions
    function closeModal(modalId) {
      document.getElementById(modalId).style.display = 'none';
      pendingAction = null;
      // currentProductId = null;
    }

    // Enhanced product details modal with specifications and actions
function viewProductDetails(productId) {
  const product = currentProducts.find(p => p._id === productId);
  if (!product) return;

  currentProductId = productId;

  const modalBody = document.getElementById('modalBody');
  const modalFooter = document.getElementById('modalFooter');

  const imageUrl = product.images && product.images[0]?.url 
    ? product.images[0].url 
    : '/images/placeholder-watch.jpg';

  const specifications = product.specifications || {};

  const discount = product.price !== product.salePrice
    ? `${Math.round(((product.price - product.salePrice) / product.price) * 100)}%`
    : '0%';

  modalBody.innerHTML = `
    <div class="product-details">
      <!-- Product Header -->
      <div class="product-header">
        <img src="${imageUrl}" 
             class="detail-image"
             onerror="this.src='/images/placeholder-watch.jpg'" 
             alt="${product.productName}">
        
        <div class="product-basic-info">
          <h2>${product.productName}</h2>
          <p><strong>Brand:</strong> ${product.brand}</p>
          <p><strong>Category:</strong> ${Array.isArray(product.category) ? product.category.join(' > ') : product.category}</p>

          <div class="price-info">
            <span class="detail-sale-price">₹${formatPrice(product.salePrice)}</span>
            ${product.price !== product.salePrice ? 
              `<span class="detail-original-price">₹${formatPrice(product.price)}</span>` : ''}
          </div>

          <span class="status-badge ${product.isBlocked ? 'status-blocked' : 'status-active'}" id="currentStatus">
            ${product.isBlocked ? 'Blocked' : 'Active'}
          </span>
        </div>
      </div>

      <!-- Details Grid -->
      <div class="detail-grid">
        <!-- Product Info -->
        <div class="detail-section">
          <h3>Product Information</h3>
          <div class="detail-item">
            <span class="detail-label">SKU:</span>
            <span class="detail-value"><code>${product.sku}</code></span>
          </div>
          <div class="detail-item">
            <span class="detail-label">Description:</span>
            <span class="detail-value">${product.description || 'No description available'}</span>
          </div>
          <div class="detail-item">
            <span class="detail-label">Stock:</span>
            <span class="detail-value ${product.stockQuantity < 10 ? 'stock-low' : 'stock-good'}" id="currentStock">
              ${product.stockQuantity} units
            </span>
          </div>
          <div class="detail-item">
            <span class="detail-label">Weight:</span>
            <span class="detail-value">${product.weight || 'N/A'}</span>
          </div>
        </div>

        <!-- Pricing Details -->
        <div class="detail-section">
          <h3>Pricing Details</h3>
          <div class="detail-item">
            <span class="detail-label">Original Price:</span>
            <span class="detail-value">₹${formatPrice(product.price)}</span>
          </div>
          <div class="detail-item">
            <span class="detail-label">Sale Price:</span>
            <span class="detail-value">₹${formatPrice(product.salePrice)}</span>
          </div>
          <div class="detail-item">
            <span class="detail-label">Discount:</span>
            <span class="detail-value">${discount}</span>
          </div>
          <div class="detail-item">
            <span class="detail-label">Tax Rate:</span>
            <span class="detail-value">${product.taxRate || 0}%</span>
          </div>
        </div>

        <!-- Status & Dates -->
        <div class="detail-section">
          <h3>Status & Dates</h3>
          <div class="detail-item">
            <span class="detail-label">Status:</span>
            <span class="detail-value">
              <span class="status-badge ${product.isBlocked ? 'status-blocked' : 'status-active'}">
                ${product.isBlocked ? 'Blocked' : 'Active'}
              </span>
            </span>
          </div>
          <div class="detail-item">
            <span class="detail-label">Created:</span>
            <span class="detail-value">${formatDate(product.createdAt)}</span>
          </div>
          <div class="detail-item">
            <span class="detail-label">Updated:</span>
            <span class="detail-value">${formatDate(product.updatedAt)}</span>
          </div>
          <div class="detail-item">
            <span class="detail-label">Featured:</span>
            <span class="detail-value">${product.isFeatured ? 'Yes' : 'No'}</span>
          </div>
        </div>

        <!-- Specifications -->
        ${Object.keys(specifications).length > 0 ? `
          <div class="detail-section">
            <h3>Specifications</h3>
            ${Object.entries(specifications).map(([key, value]) => `
              <div class="detail-item">
                <span class="detail-label">${key}:</span>
                <span class="detail-value">${value}</span>
              </div>
            `).join('')}
          </div>
        ` : ''}

        <!-- Additional Images -->
        ${product.images && product.images.length > 1 ? `
          <div class="detail-section">
            <h3>Additional Images</h3>
            <div class="image-gallery">
              ${product.images.slice(1).map(img => `
                <img src="${img.url}" 
                     class="gallery-image"
                     onerror="this.style.display='none'" 
                     alt="Product Image">
              `).join('')}
            </div>
          </div>
        ` : ''}
      </div>
    </div>
  `;

  // Modal Footer Buttons
  modalFooter.innerHTML = `
    <div class="modal-actions">
      <button class="btn btn-warning" onclick="editProduct('${product._id}')">
        Edit Product
      </button>
      <button class="btn ${product.isBlocked ? 'btn-success' : 'btn-danger'}" 
              onclick="showBlockModal('${product._id}', ${product.isBlocked})" 
              id="blockActionBtn">
        ${product.isBlocked ? 'Unblock' : 'Block'} Product
      </button>
      <button class="btn btn-danger" onclick="showDeleteModal('${product._id}')">
        Delete Product
      </button>
      <button class="btn btn-secondary" onclick="closeModal('productModal')">
        Close
      </button>
    </div>
  `;

  // Show modal
  document.getElementById('productModal').style.display = 'block';
}

    // ==================== ACTION FUNCTIONS ====================
    // Navigate to add new product page
    function addNewProduct() {
      window.location.href = '/admin/products/add';
    }

    // Navigate to edit product page
    function editProduct(productId) {
      window.location.href = `/admin/products/edit/${productId}`;
    }

    // Show block/unblock confirmation modal
    function showBlockModal(productId, isCurrentlyBlocked) {
      const action = isCurrentlyBlocked ? 'unblock' : 'block';
      const product = currentProducts.find(p => p._id === productId);
      
      document.getElementById('blockModalTitle').textContent = `${action.charAt(0).toUpperCase() + action.slice(1)} Product`;
      document.getElementById('blockModalMessage').textContent = 
        `Are you sure you want to ${action} "${product.productName}"?`;
      
      const confirmBtn = document.getElementById('blockConfirmBtn');
      confirmBtn.textContent = action.charAt(0).toUpperCase() + action.slice(1);
      confirmBtn.className = `btn ${isCurrentlyBlocked ? 'btn-success' : 'btn-danger'}`;
      
      pendingAction = { type: 'block', productId, isCurrentlyBlocked };
      document.getElementById('blockModal').style.display = 'block';
    }

    // Show delete confirmation modal
    function showDeleteModal(productId) {
      pendingAction = { type: 'delete', productId };
      document.getElementById('deleteModal').style.display = 'block';
    }

    // Confirm block/unblock action with AJAX update
    async function confirmBlockAction() {
      if (!pendingAction || pendingAction.type !== 'block') return;

      const { productId, isCurrentlyBlocked } = pendingAction;
      const action = isCurrentlyBlocked ? 'unblock' : 'block';

      try {
        const response = await axios.patch(`/admin/products/block/${productId}/`, {
          isBlocked: !isCurrentlyBlocked
        });

        if (response.data.success) {
          // Update product in current list
          const productIndex = currentProducts.findIndex(p => p._id === productId);
          if (productIndex !== -1) {
            currentProducts[productIndex].isBlocked = !isCurrentlyBlocked;
          }

          // Update main products list
          const mainProductIndex = allProducts.findIndex(p => p._id === productId);
          if (mainProductIndex !== -1) {
            allProducts[mainProductIndex].isBlocked = !isCurrentlyBlocked;
          }

          // Update table view
          renderProducts();
          
          // Update modal if still open for same product
          if (currentProductId === productId) {
            const statusBadge = document.getElementById('currentStatus');
            const blockBtn = document.getElementById('blockActionBtn');
            
            if (statusBadge) {
              statusBadge.className = `status-badge ${!isCurrentlyBlocked ? 'status-blocked' : 'status-active'}`;
              statusBadge.textContent = !isCurrentlyBlocked ? 'Blocked' : 'Active';
            }
            
            if (blockBtn) {
              blockBtn.className = `btn ${!isCurrentlyBlocked ? 'btn-success' : 'btn-danger'}`;
              blockBtn.textContent = `${!isCurrentlyBlocked ? 'Unblock' : 'Block'} Product`;
              blockBtn.onclick = () => showBlockModal(productId, !isCurrentlyBlocked);
            }
          }


          closeModal('blockModal');
          showToast(`Product ${action}ed successfully!`);
          viewProductDetails(productId);
          // viewProductDetails(productId);
          // window.location.href = response.data.redirect;
        } else {
          showToast(response.data.message || `Failed to ${action} product`, 'error');
        }
      } catch (error) {
        console.error(`Error ${action}ing product:`, error);
        showToast(`Error ${action}ing product. Please try again.`, 'error');
      }
    }

    // Confirm delete action with AJAX update
    async function confirmDeleteAction() {

      if (!pendingAction || pendingAction.type !== 'delete') return;

      const { productId } = pendingAction;

      try {
        const response = await axios.delete(`/admin/products/delete/${productId}`);

        if (response.data.success) {
          // Remove from current products
          currentProducts = currentProducts.filter(p => p._id !== productId);
          // Remove from all products
          allProducts = allProducts.filter(p => p._id !== productId);
          totalProducts--;

          renderProducts();
          updatePagination();
          closeModal('deleteModal');
          
          // Close product modal if it was open for deleted product
          if (currentProductId === productId) {
            closeModal('productModal');
          }
          
          showToast(response.data.message || 'Product deleted successfully!');
        } else {
          showToast(response.data.message || 'Failed to delete product', 'error');
        }
      } catch (error) {
        console.error('Error deleting product:', error);
        showToast('Error deleting product. Please try again.', 'error');
      }
    }
  


  </script>
</body>
</html>