<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sales Report - Admin</title>
    <link rel="stylesheet" href="/styles/dashboard.css">
    <link rel="stylesheet" href="/styles/admin-sales-report.css">
    <link rel="stylesheet" href="/styles/dashboard.css" />
    
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
    />
    <script src="https://cdn.jsdelivr.net/npm/axios@1.6.0/dist/axios.min.js"></script>
</head>
<body>
    <%- include('../../partials/sidebar') %>

    <div class="container">
        <header class="page-header">
            <h1>Sales Report</h1>
            <div class="header-actions">
                <button class="btn btn-primary" onclick="downloadReport('pdf')">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-file-text"><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"/><path d="M14 2v4a2 2 0 0 0 2 2h4"/><path d="M10 9H8"/><path d="M16 13H8"/><path d="M16 17H8"/></svg>
                    Download PDF
                </button>
                <button class="btn btn-success" onclick="downloadReport('excel')">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-file-spreadsheet"><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"/><path d="M14 2v4a2 2 0 0 0 2 2h4"/><path d="M8 21V13"/><path d="M16 21V13"/><path d="M4 13h16"/></svg>
                    Download Excel
                </button>
            </div>
        </header>

        <!-- Filter Section -->
        <div class="filters-section">
            <div class="filter-group">
                <label for="periodFilter">Filter By:</label>
                <select id="periodFilter" class="filter-select">
                    <option value="all">All Time</option>
                    <option value="today">Today</option>
                    <option value="weekly">Last 7 Days</option>
                    <option value="monthly">Last 30 Days</option>
                    <option value="annual">Last 365 Days</option>
                    <option value="custom">Custom Date Range</option>
                </select>
            </div>
            <div class="filter-group" id="startDateGroup" style="display: none;">
                <label for="startDate">Start Date:</label>
                <input type="date" id="startDate" class="filter-input">
            </div>
            <div class="filter-group" id="endDateGroup" style="display: none;">
                <label for="endDate">End Date:</label>
                <input type="date" id="endDate" class="filter-input">
            </div>
            <div class="filter-group">
                <label for="statusFilter">Status:</label>
                <select id="statusFilter" class="filter-select">
                    <option value="">All Status</option>
                    <option value="Pending">Pending</option>
                    <option value="Placed">Placed</option>
                    <option value="Shipped">Shipped</option>
                    <option value="Delivered">Delivered</option>
                    <option value="Cancelled">Cancelled</option>
                    <option value="Return Requested">Return Requested</option>
                    <option value="Return Approved">Return Approved</option>
                    <option value="Return Rejected">Return Rejected</option>
                </select>
            </div>
            <div class="filter-buttons">
                <button class="btn btn-primary" onclick="applyFilters()">Apply Filters</button>
                <button class="btn btn-secondary" onclick="clearFilters()">Clear</button>
            </div>
        </div>

        <!-- Summary Cards -->
        <div class="summary-cards">
            <div class="summary-card">
                <div class="summary-icon orders">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-shopping-cart"><circle cx="8" cy="21" r="1"/><circle cx="19" cy="21" r="1"/><path d="M2.05 2.05h2l2.66 12.42a2 2 0 0 0 2 1.58h9.78a2 2 0 0 0 1.95-1.57l1.65-7.43H5.12"/></svg>
                </div>
                <div>
                    <div class="summary-value" id="totalOrders">0</div>
                    <div class="summary-label">Total Orders</div>
                </div>
            </div>
            <div class="summary-card">
                <div class="summary-icon revenue">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-indian-rupee"><path d="M6 3h12"/><path d="M6 8h12"/><path d="m6 13 8.5 8"/><path d="M14 13H6c-2.5 0-5-2.5-5-5s2.5-5 5-5h12c2.5 0 5 2.5 5 5s-2.5 5-5 5H8"/></svg>
                </div>
                <div>
                    <div class="summary-value" id="totalRevenue">₹0</div>
                    <div class="summary-label">Total Revenue</div>
                </div>
            </div>
            <div class="summary-card">
                <div class="summary-icon discount">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-percent"><line x1="19" x2="5" y1="5" y2="19"/><circle cx="6.5" cy="6.5" r="2.5"/><circle cx="17.5" cy="17.5" r="2.5"/></svg>
                </div>
                <div>
                    <div class="summary-value" id="totalDiscount">₹0</div>
                    <div class="summary-label">Total Discount</div>
                </div>
            </div>
            <div class="summary-card">
                <div class="summary-icon refunds">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-undo-2"><path d="M9.14 14.24a5 5 0 0 0-4.73-4.73L3 10"/><path d="M21 12a9 9 0 0 0-9-9c-2.52 0-4.93 1-6.71 2.7L3 8"/><path d="M12 21a9 9 0 0 0 9-9c0-2.52-1-4.93-2.7-6.71L16 3"/></svg>
                </div>
                <div>
                    <div class="summary-value" id="totalRefunds">₹0</div>
                    <div class="summary-label">Total Refunds</div>
                </div>
            </div>
        </div>

        <!-- Sales Data Table -->
        <div class="table-container">
            <div class="table-header-controls">
                <h3>Sales Data</h3>
                <div class="items-per-page">
                    <label for="itemsPerPage">Items per page:</label>
                    <select id="itemsPerPage" class="items-per-page-select" onchange="applyFilters()">
                        <option value="10">10</option>
                        <option value="25">25</option>
                        <option value="50">50</option>
                        <option value="100">100</option>
                    </select>
                </div>
            </div>
            <table class="sales-table">
                <thead>
                    <tr>
                        <th>Order ID</th>
                        <th>Customer</th>
                        <th>Date</th>
                        <th>Items</th>
                        <th>Payment Method</th>
                        <th>Status</th>
                        <th>Subtotal</th>
                        <th>Discount</th>
                        <th>Total</th>
                        <th>Refunded</th>
                    </tr>
                </thead>
                <tbody id="salesTableBody">
                    <!-- Sales data will be loaded here -->
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        <div class="pagination-container">
            <div class="pagination-info" id="paginationInfo">
                Showing 0 to 0 of 0 entries
            </div>
            <div class="pagination" id="paginationControls">
                <!-- Pagination buttons will be loaded here -->
            </div>
        </div>
    </div>

    <!-- Loading Spinner -->
    <div id="loadingSpinner" class="loading-spinner">
        <div class="spinner"></div>
    </div>

    <script>
        // Global state for filters and pagination
        const currentFilters = {
            period: "all",
            startDate: "",
            endDate: "",
            status: "",
            page: 1,
            limit: 10,
        };

        document.addEventListener("DOMContentLoaded", () => {
            initializeFiltersFromURL();
            fetchSalesReportData();

            document.getElementById("periodFilter").addEventListener("change", handlePeriodChange);
            document.getElementById("itemsPerPage").addEventListener("change", applyFilters);
        });

        function initializeFiltersFromURL() {
            const params = new URLSearchParams(window.location.search);
            currentFilters.period = params.get("period") || "all";
            currentFilters.startDate = params.get("startDate") || "";
            currentFilters.endDate = params.get("endDate") || "";
            currentFilters.status = params.get("status") || "";
            currentFilters.page = parseInt(params.get("page")) || 1;
            currentFilters.limit = parseInt(params.get("limit")) || 10;

            // Set initial values to UI elements
            document.getElementById("periodFilter").value = currentFilters.period;
            document.getElementById("statusFilter").value = currentFilters.status;
            document.getElementById("itemsPerPage").value = currentFilters.limit;

            // Handle custom date range display
            handlePeriodChange();
            if (currentFilters.period === "custom") {
                document.getElementById("startDate").value = currentFilters.startDate;
                document.getElementById("endDate").value = currentFilters.endDate;
            }
        }

        function handlePeriodChange() {
            const period = document.getElementById("periodFilter").value;
            const startDateGroup = document.getElementById("startDateGroup");
            const endDateGroup = document.getElementById("endDateGroup");

            if (period === "custom") {
                startDateGroup.style.display = "flex";
                endDateGroup.style.display = "flex";
            } else {
                startDateGroup.style.display = "none";
                endDateGroup.style.display = "none";
                document.getElementById("startDate").value = "";
                document.getElementById("endDate").value = "";
            }
        }

        async function fetchSalesReportData() {
            showLoading();
            try {
                const params = new URLSearchParams();
                params.append("period", currentFilters.period);
                if (currentFilters.period === "custom") {
                    params.append("startDate", currentFilters.startDate);
                    params.append("endDate", currentFilters.endDate);
                }
                if (currentFilters.status) {
                    params.append("status", currentFilters.status);
                }
                params.append("page", currentFilters.page);
                params.append("limit", currentFilters.limit);

                const response = await axios.get(`/admin/sales/report/data?${params.toString()}`);
                console.log("Sales Report Data:", response.data);
                const { data: orders, summary, pagination } = response.data;

                updateSummaryCards(summary);
                updateSalesTable(orders);
                updatePagination(pagination);

            } catch (error) {
                console.error("Error fetching sales report data:", error);
                showToast("Failed to load sales report data.", "error");
            } finally {
                hideLoading();
            }
        }

        function updateSummaryCards(summary) {
            document.getElementById("totalOrders").textContent = summary.totalOrders.toLocaleString();
            document.getElementById("totalRevenue").textContent = `₹${summary.totalRevenue.toLocaleString()}`;
            document.getElementById("totalDiscount").textContent = `₹${summary.totalDiscount.toLocaleString()}`;
            document.getElementById("totalRefunds").textContent = `₹${summary.totalRefunds.toLocaleString()}`;
        }

        function updateSalesTable(orders) {
            const tableBody = document.getElementById("salesTableBody");
            tableBody.innerHTML = ""; // Clear existing rows

            if (orders.length === 0) {
                tableBody.innerHTML = `<tr><td colspan="10" class="no-data">No sales data found for the selected filters.</td></tr>`;
                return;
            }

            orders.forEach(order => {
                const row = `
                    <tr>
                        <td>#${order.orderId}</td>
                        <td>${order.shippingAddress.fullName}</td>
                        <td>${new Date(order.createdAt).toLocaleDateString()}</td>
                        <td>${order.items.length}</td>
                        <td>${order.paymentMethod}</td>
                        <td>
                            <span class="status-badge status-${order.orderStatus.toLowerCase().replace(/\s+/g, '-')}"
                                >${order.orderStatus}</span
                            ><br>
                            <span class="payment-status ${order.paymentStatus.toLowerCase()}"
                                >${order.paymentStatus}</span
                            >
                        </td>
                        <td>₹${order.subtotal + order.discount}</td>
                        <td>₹${order.discount.toLocaleString()}</td>
                        <td>₹${order.totalAmount.toLocaleString()}</td>
                        <td>₹${order.refundedAmount.toLocaleString()}</td>
                    </tr>
                `;
                tableBody.insertAdjacentHTML("beforeend", row);
            });
        }

        function updatePagination(pagination) {
            const paginationInfo = document.getElementById("paginationInfo");
            const paginationControls = document.getElementById("paginationControls");

            const startEntry = (pagination.currentPage - 1) * pagination.itemsPerPage + 1;
            const endEntry = Math.min(pagination.currentPage * pagination.itemsPerPage, pagination.totalItems);
            paginationInfo.textContent = `Showing ${startEntry} to ${endEntry} of ${pagination.totalItems} entries`;

            paginationControls.innerHTML = ""; // Clear existing buttons

            if (pagination.currentPage > 1) {
                paginationControls.insertAdjacentHTML("beforeend", `<button class="pagination-btn" onclick="goToPage(${pagination.currentPage - 1})">Previous</button>`);
            }

            // Display a range of pages around the current page
            const maxPagesToShow = 5;
            let startPage = Math.max(1, pagination.currentPage - Math.floor(maxPagesToShow / 2));
            let endPage = Math.min(pagination.totalPages, startPage + maxPagesToShow - 1);

            if (endPage - startPage + 1 < maxPagesToShow) {
                startPage = Math.max(1, endPage - maxPagesToShow + 1);
            }

            for (let i = startPage; i <= endPage; i++) {
                const activeClass = i === pagination.currentPage ? "active" : "";
                paginationControls.insertAdjacentHTML("beforeend", `<button class="pagination-btn ${activeClass}" onclick="goToPage(${i})">${i}</button>`);
            }

            if (pagination.currentPage < pagination.totalPages) {
                paginationControls.insertAdjacentHTML("beforeend", `<button class="pagination-btn" onclick="goToPage(${pagination.currentPage + 1})">Next</button>`);
            }
        }

        function applyFilters() {
            currentFilters.period = document.getElementById("periodFilter").value;
            currentFilters.startDate = document.getElementById("startDate").value;
            currentFilters.endDate = document.getElementById("endDate").value;
            currentFilters.status = document.getElementById("statusFilter").value;
            currentFilters.limit = parseInt(document.getElementById("itemsPerPage").value);
            currentFilters.page = 1; // Reset to first page on filter change

            updateURLAndFetch();
        }

        function clearFilters() {
            document.getElementById("periodFilter").value = "all";
            document.getElementById("startDate").value = "";
            document.getElementById("endDate").value = "";
            document.getElementById("statusFilter").value = "";
            document.getElementById("itemsPerPage").value = "10";
            
            currentFilters.period = "all";
            currentFilters.startDate = "";
            currentFilters.endDate = "";
            currentFilters.status = "";
            currentFilters.limit = 10;
            currentFilters.page = 1;

            handlePeriodChange(); // Hide custom date inputs
            updateURLAndFetch();
        }

        function goToPage(page) {
            currentFilters.page = page;
            updateURLAndFetch();
        }

        function updateURLAndFetch() {
            const params = new URLSearchParams();
            params.append("period", currentFilters.period);
            if (currentFilters.period === "custom") {
                if (currentFilters.startDate) params.append("startDate", currentFilters.startDate);
                if (currentFilters.endDate) params.append("endDate", currentFilters.endDate);
            }
            if (currentFilters.status) params.append("status", currentFilters.status);
            params.append("page", currentFilters.page);
            params.append("limit", currentFilters.limit);

            const newUrl = `${window.location.pathname}?${params.toString()}`;
            window.history.pushState({ path: newUrl }, "", newUrl); // Update URL without full reload
            fetchSalesReportData(); // Fetch data for the new state
        }

        function downloadReport(type) {
            const params = new URLSearchParams();
            params.append("period", currentFilters.period);
            if (currentFilters.period === "custom") {
                if (currentFilters.startDate) params.append("startDate", currentFilters.startDate);
                if (currentFilters.endDate) params.append("endDate", currentFilters.endDate);
            }
            if (currentFilters.status) params.append("status", currentFilters.status);

            if (type === 'pdf') {
                window.location.href = `/admin/sales/report/download/pdf?${params.toString()}`;
            } else if (type === 'excel') {
                window.location.href = `/admin/sales/report/download/excel?${params.toString()}`;
            }
        }

        // Utility functions (re-using from previous context)
        function showLoading() {
            document.getElementById("loadingSpinner").style.display = "flex";
        }

        function hideLoading() {
            document.getElementById("loadingSpinner").style.display = "none";
        }

        function showToast(message, type = "info") {
            const toast = document.createElement("div");
            toast.className = `toast ${type}`;

            const iconMap = {
                success: "✓",
                error: "✕",
                warning: "⚠",
                info: "ℹ",
            };

            toast.innerHTML = `
                <span class="toast-icon">${iconMap[type] || "ℹ"}</span>
                <span class="toast-message">${message}</span>
            `;

            document.getElementById("toastContainer").appendChild(toast);

            setTimeout(() => {
                if (toast.parentElement) {
                    toast.remove();
                }
            }, 5000);
        }
    </script>
    <!-- Toast Container (ensure this element exists in your main layout or here) -->
    <div id="toastContainer" class="toast-container"></div>
</body>
</html>
