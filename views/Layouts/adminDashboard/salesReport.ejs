<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sales Report - Chronova Admin</title>
    <link rel="stylesheet" href="/styles/admin-sales-report.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <div class="admin-container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="sidebar-header">
                <h2>Chronova</h2>
            </div>
            <nav class="sidebar-nav">
                <a href="/admin/dashboard" class="nav-item">
                    <i class="fas fa-tachometer-alt"></i>
                    <span>Dashboard</span>
                </a>
                <a href="/admin/users" class="nav-item">
                    <i class="fas fa-users"></i>
                    <span>Users</span>
                </a>
                <a href="/admin/products" class="nav-item">
                    <i class="fas fa-box"></i>
                    <span>Products</span>
                </a>
                <a href="/admin/category" class="nav-item">
                    <i class="fas fa-tags"></i>
                    <span>Category</span>
                </a>
                <a href="/admin/orders" class="nav-item">
                    <i class="fas fa-shopping-cart"></i>
                    <span>Orders</span>
                </a>
                <a href="/admin/stock-registry" class="nav-item">
                    <i class="fas fa-warehouse"></i>
                    <span>Stock Registry</span>
                </a>
                <a href="/admin/product-offers" class="nav-item">
                    <i class="fas fa-percent"></i>
                    <span>Product offer management</span>
                </a>
                <a href="/admin/category-offers" class="nav-item">
                    <i class="fas fa-tag"></i>
                    <span>Category offer management</span>
                </a>
                <a href="/admin/coupons" class="nav-item">
                    <i class="fas fa-ticket-alt"></i>
                    <span>Coupon management</span>
                </a>
                <a href="/admin/sales-report" class="nav-item active">
                    <i class="fas fa-chart-line"></i>
                    <span>Sales Report</span>
                </a>
                <a href="/admin/banners" class="nav-item">
                    <i class="fas fa-image"></i>
                    <span>Banner management</span>
                </a>
                <a href="/admin/settings" class="nav-item">
                    <i class="fas fa-cog"></i>
                    <span>Settings</span>
                </a>
                <a href="/admin/logout" class="nav-item">
                    <i class="fas fa-sign-out-alt"></i>
                    <span>Logout</span>
                </a>
            </nav>
        </div>

        <!-- Main Content -->
        <div class="main-content">
            <div class="content-header">
                <h1>Sales Report</h1>
                <div class="header-actions">
                    <button id="downloadPdf" class="btn btn-primary">
                        <i class="fas fa-file-pdf"></i>
                        Download PDF
                    </button>
                    <button id="downloadExcel" class="btn btn-success">
                        <i class="fas fa-file-excel"></i>
                        Download Excel
                    </button>
                </div>
            </div>

            <!-- Filters Section -->
            <div class="filters-section">
                <div class="filter-row">
                    <div class="filter-group">
                        <label>Filter By:</label>
                        <select id="periodFilter" class="form-select">
                            <option value="weekly">Weekly</option>
                            <option value="monthly">Monthly</option>
                            <option value="annual">Annual</option>
                            <option value="custom">Custom Range</option>
                        </select>
                    </div>
                    
                    <div class="filter-group custom-date-range" style="display: none;">
                        <label>Start Date:</label>
                        <input type="date" id="startDate" class="form-input">
                    </div>
                    
                    <div class="filter-group custom-date-range" style="display: none;">
                        <label>End Date:</label>
                        <input type="date" id="endDate" class="form-input">
                    </div>
                    
                    <div class="filter-group">
                        <label>Status:</label>
                        <select id="statusFilter" class="form-select">
                            <option value="">All Status</option>
                            <option value="Placed">Placed</option>
                            <option value="Cancelled">Cancelled</option>
                            <option value="Return Approved">Return Approved</option>
                            <option value="Delivered">Delivered</option>
                        </select>
                    </div>
                    
                    <button id="applyFilters" class="btn btn-primary">Apply Filters</button>
                    <button id="clearFilters" class="btn btn-secondary">Clear</button>
                </div>
            </div>

            <!-- Summary Cards -->
            <div class="summary-cards">
                <div class="summary-card">
                    <div class="card-icon">
                        <i class="fas fa-shopping-cart"></i>
                    </div>
                    <div class="card-content">
                        <h3 id="totalOrders">0</h3>
                        <p>Total Orders</p>
                    </div>
                </div>
                <div class="summary-card">
                    <div class="card-icon">
                        <i class="fas fa-rupee-sign"></i>
                    </div>
                    <div class="card-content">
                        <h3 id="totalRevenue">₹0</h3>
                        <p>Total Revenue</p>
                    </div>
                </div>
                <div class="summary-card">
                    <div class="card-icon">
                        <i class="fas fa-percentage"></i>
                    </div>
                    <div class="card-content">
                        <h3 id="totalDiscount">₹0</h3>
                        <p>Total Discount</p>
                    </div>
                </div>
                <div class="summary-card">
                    <div class="card-icon">
                        <i class="fas fa-undo"></i>
                    </div>
                    <div class="card-content">
                        <h3 id="totalRefunds">₹0</h3>
                        <p>Total Refunds</p>
                    </div>
                </div>
            </div>

            <!-- Sales Table -->
            <div class="table-section">
                <div class="table-header">
                    <h3>Sales Data</h3>
                    <div class="table-controls">
                        <select id="itemsPerPage" class="form-select">
                            <option value="10">10 per page</option>
                            <option value="25">25 per page</option>
                            <option value="50">50 per page</option>
                            <option value="100">100 per page</option>
                        </select>
                    </div>
                </div>
                
                <div class="table-container">
                    <table class="sales-table">
                        <thead>
                            <tr>
                                <th>Order ID</th>
                                <th>Customer</th>
                                <th>Date</th>
                                <th>Items</th>
                                <th>Payment Method</th>
                                <th>Status</th>
                                <th>Subtotal</th>
                                <th>Discount</th>
                                <th>Total</th>
                                <th>Refunded</th>
                            </tr>
                        </thead>
                        <tbody id="salesTableBody">
                            <!-- Data will be populated by JavaScript -->
                        </tbody>
                    </table>
                </div>
                
                <!-- Pagination -->
                <div class="pagination-container">
                    <div class="pagination-info">
                        <span id="paginationInfo">Showing 0 to 0 of 0 entries</span>
                    </div>
                    <div class="pagination">
                        <button id="prevPage" class="btn btn-outline" disabled>
                            <i class="fas fa-chevron-left"></i>
                        </button>
                        <div id="pageNumbers" class="page-numbers">
                            <!-- Page numbers will be generated by JavaScript -->
                        </div>
                        <button id="nextPage" class="btn btn-outline" disabled>
                            <i class="fas fa-chevron-right"></i>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Loading Spinner -->
            <div id="loadingSpinner" class="loading-spinner" style="display: none;">
                <div class="spinner"></div>
                <p>Loading sales data...</p>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let currentPage = 1;
        let itemsPerPage = 10;
        let totalItems = 0;
        let salesData = [];
        let filteredData = [];

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            initializePage();
            setupEventListeners();
            loadSalesData();
        });

        function initializePage() {
            // Set default dates
            const today = new Date();
            const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
            
            document.getElementById('endDate').value = today.toISOString().split('T')[0];
            document.getElementById('startDate').value = weekAgo.toISOString().split('T')[0];
        }

        function setupEventListeners() {
            // Period filter change
            document.getElementById('periodFilter').addEventListener('change', function() {
                const customDateRange = document.querySelectorAll('.custom-date-range');
                if (this.value === 'custom') {
                    customDateRange.forEach(el => el.style.display = 'block');
                } else {
                    customDateRange.forEach(el => el.style.display = 'none');
                    setDateRangeByPeriod(this.value);
                }
            });

            // Apply filters
            document.getElementById('applyFilters').addEventListener('click', applyFilters);
            
            // Clear filters
            document.getElementById('clearFilters').addEventListener('click', clearFilters);
            
            // Items per page change
            document.getElementById('itemsPerPage').addEventListener('change', function() {
                itemsPerPage = parseInt(this.value);
                currentPage = 1;
                renderTable();
                renderPagination();
            });

            // Download buttons
            document.getElementById('downloadPdf').addEventListener('click', downloadPDF);
            document.getElementById('downloadExcel').addEventListener('click', downloadExcel);

            // Pagination
            document.getElementById('prevPage').addEventListener('click', () => {
                if (currentPage > 1) {
                    currentPage--;
                    renderTable();
                    renderPagination();
                }
            });

            document.getElementById('nextPage').addEventListener('click', () => {
                const totalPages = Math.ceil(totalItems / itemsPerPage);
                if (currentPage < totalPages) {
                    currentPage++;
                    renderTable();
                    renderPagination();
                }
            });

            // Date validation
            document.getElementById('startDate').addEventListener('change', validateDates);
            document.getElementById('endDate').addEventListener('change', validateDates);
        }

        function setDateRangeByPeriod(period) {
            const today = new Date();
            const endDate = today.toISOString().split('T')[0];
            let startDate;

            switch(period) {
                case 'weekly':
                    startDate = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
                    break;
                case 'monthly':
                    startDate = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);
                    break;
                case 'annual':
                    startDate = new Date(today.getTime() - 365 * 24 * 60 * 60 * 1000);
                    break;
                default:
                    startDate = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
            }

            document.getElementById('startDate').value = startDate.toISOString().split('T')[0];
            document.getElementById('endDate').value = endDate;
        }

        function validateDates() {
            const startDate = new Date(document.getElementById('startDate').value);
            const endDate = new Date(document.getElementById('endDate').value);

            if (startDate >= endDate) {
                alert('End date must be greater than start date');
                return false;
            }
            return true;
        }

        async function loadSalesData() {
            try {
                showLoading(true);
                const response = await axios.get('/admin/sales/report/data');
                salesData = response.data.data || [];
                filteredData = [...salesData];
                totalItems = filteredData.length;
                
                updateSummaryCards();
                renderTable();
                renderPagination();
            } catch (error) {
                console.error('Error loading sales data:', error);
                alert('Error loading sales data. Please try again.');
            } finally {
                showLoading(false);
            }
        }

        async function applyFilters() {
            if (!validateDates()) return;

            try {
                showLoading(true);
                
                const filters = {
                    period: document.getElementById('periodFilter').value,
                    startDate: document.getElementById('startDate').value,
                    endDate: document.getElementById('endDate').value,
                    status: document.getElementById('statusFilter').value
                };

                const queryParams = new URLSearchParams();
                Object.keys(filters).forEach(key => {
                    if (filters[key]) queryParams.append(key, filters[key]);
                });

                const response = await axios.get(`/admin/sales/report/data?${queryParams.toString()}`);
                filteredData = response.data.data || [];
                totalItems = filteredData.length;
                currentPage = 1;

                updateSummaryCards();
                renderTable();
                renderPagination();
                
                // Update URL without page reload
                window.history.pushState({}, '', `/admin/sales/report/data?${queryParams.toString()}`);
            } catch (error) {
                console.error('Error applying filters:', error);
                alert('Error applying filters. Please try again.');
            } finally {
                showLoading(false);
            }
        }

        function clearFilters() {
            document.getElementById('periodFilter').value = 'weekly';
            document.getElementById('statusFilter').value = '';
            document.querySelectorAll('.custom-date-range').forEach(el => el.style.display = 'none');
            
            setDateRangeByPeriod('weekly');
            currentPage = 1;
            
            filteredData = [...salesData];
            totalItems = filteredData.length;
            
            updateSummaryCards();
            renderTable();
            renderPagination();
            
            window.history.pushState({}, '', '/admin/sales-report');
        }

        function updateSummaryCards() {
            const totalOrders = filteredData.length;
            const totalRevenue = filteredData.reduce((sum, order) => sum + order.totalAmount, 0);
            const totalDiscount = filteredData.reduce((sum, order) => sum + order.discount, 0);
            const totalRefunds = filteredData.reduce((sum, order) => sum + order.refundedAmount, 0);

            document.getElementById('totalOrders').textContent = totalOrders.toLocaleString();
            document.getElementById('totalRevenue').textContent = `₹${totalRevenue.toLocaleString()}`;
            document.getElementById('totalDiscount').textContent = `₹${totalDiscount.toLocaleString()}`;
            document.getElementById('totalRefunds').textContent = `₹${totalRefunds.toLocaleString()}`;
        }

        function renderTable() {
            const tbody = document.getElementById('salesTableBody');
            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;
            const pageData = filteredData.slice(startIndex, endIndex);

            tbody.innerHTML = '';

            if (pageData.length === 0) {
                tbody.innerHTML = '<tr><td colspan="10" class="no-data">No sales data found</td></tr>';
                return;
            }

            pageData.forEach(order => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td class="order-id">${order.orderId}</td>
                    <td class="customer-name">${order.shippingAddress.fullName}</td>
                    <td class="order-date">${new Date(order.createdAt).toLocaleDateString()}</td>
                    <td class="items-count">${order.items.length}</td>
                    <td class="payment-method">
                        <span class="payment-badge ${order.paymentMethod.toLowerCase()}">${order.paymentMethod}</span>
                    </td>
                    <td class="order-status">
                        <span class="status-badge ${order.orderStatus.toLowerCase().replace(' ', '-')}">${order.orderStatus}</span>
                    </td>
                    <td class="amount">₹${order.subtotal.toLocaleString()}</td>
                    <td class="discount">₹${order.discount.toLocaleString()}</td>
                    <td class="total">₹${order.totalAmount.toLocaleString()}</td>
                    <td class="refunded">₹${order.refundedAmount.toLocaleString()}</td>
                `;
                tbody.appendChild(row);
            });
        }

        function renderPagination() {
            const totalPages = Math.ceil(totalItems / itemsPerPage);
            const startItem = totalItems === 0 ? 0 : (currentPage - 1) * itemsPerPage + 1;
            const endItem = Math.min(currentPage * itemsPerPage, totalItems);

            // Update pagination info
            document.getElementById('paginationInfo').textContent = 
                `Showing ${startItem} to ${endItem} of ${totalItems} entries`;

            // Update navigation buttons
            document.getElementById('prevPage').disabled = currentPage === 1;
            document.getElementById('nextPage').disabled = currentPage === totalPages || totalPages === 0;

            // Generate page numbers
            const pageNumbers = document.getElementById('pageNumbers');
            pageNumbers.innerHTML = '';

            if (totalPages <= 7) {
                for (let i = 1; i <= totalPages; i++) {
                    createPageButton(i, pageNumbers);
                }
            } else {
                createPageButton(1, pageNumbers);
                
                if (currentPage > 4) {
                    pageNumbers.appendChild(createEllipsis());
                }

                const start = Math.max(2, currentPage - 2);
                const end = Math.min(totalPages - 1, currentPage + 2);

                for (let i = start; i <= end; i++) {
                    createPageButton(i, pageNumbers);
                }

                if (currentPage < totalPages - 3) {
                    pageNumbers.appendChild(createEllipsis());
                }

                if (totalPages > 1) {
                    createPageButton(totalPages, pageNumbers);
                }
            }
        }

        function createPageButton(pageNum, container) {
            const button = document.createElement('button');
            button.className = `page-btn ${pageNum === currentPage ? 'active' : ''}`;
            button.textContent = pageNum;
            button.addEventListener('click', () => {
                currentPage = pageNum;
                renderTable();
                renderPagination();
            });
            container.appendChild(button);
        }

        function createEllipsis() {
            const span = document.createElement('span');
            span.className = 'page-ellipsis';
            span.textContent = '...';
            return span;
        }

        async function downloadPDF() {
            try {
                showLoading(true);
                const filters = getCurrentFilters();
                const queryParams = new URLSearchParams(filters);
                
                const response = await axios.get(`/admin/sales/report/download/pdf?${queryParams.toString()}`, {
                    responseType: 'blob'
                });
                
                const url = window.URL.createObjectURL(response.data);
                const a = document.createElement('a');
                a.href = url;
                a.download = `sales-report-${new Date().toISOString().split('T')[0]}.pdf`;
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);
            } catch (error) {
                console.error('Error downloading PDF:', error);
                alert('Error downloading PDF. Please try again.');
            } finally {
                showLoading(false);
            }
        }

        async function downloadExcel() {
            try {
                showLoading(true);
                const filters = getCurrentFilters();
                const queryParams = new URLSearchParams(filters);
                
                const response = await axios.get(`/admin/sales/report/download/excel?${queryParams.toString()}`, {
                    responseType: 'blob'
                });
                
                if (!response.data) throw new Error('Failed to generate Excel');
                
                const url = window.URL.createObjectURL(response.data);
                const a = document.createElement('a');
                a.href = url;
                a.download = `sales-report-${new Date().toISOString().split('T')[0]}.xlsx`;
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);
            } catch (error) {
                console.error('Error downloading Excel:', error);
                alert('Error downloading Excel. Please try again.');
            } finally {
                showLoading(false);
            }
        }

        function getCurrentFilters() {
            return {
                period: document.getElementById('periodFilter').value,
                startDate: document.getElementById('startDate').value,
                endDate: document.getElementById('endDate').value,
                status: document.getElementById('statusFilter').value
            };
        }

        function showLoading(show) {
            document.getElementById('loadingSpinner').style.display = show ? 'flex' : 'none';
        }

        // Initialize with URL parameters if present
        window.addEventListener('load', function() {
            const urlParams = new URLSearchParams(window.location.search);
            
            if (urlParams.has('period')) {
                document.getElementById('periodFilter').value = urlParams.get('period');
            }
            if (urlParams.has('startDate')) {
                document.getElementById('startDate').value = urlParams.get('startDate');
            }
            if (urlParams.has('endDate')) {
                document.getElementById('endDate').value = urlParams.get('endDate');
            }
            if (urlParams.has('status')) {
                document.getElementById('statusFilter').value = urlParams.get('status');
            }
            
            if (urlParams.toString()) {
                applyFilters();
            }
        });
    </script>
</body>
</html>