<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Management - Admin</title>
    <link rel="stylesheet" href="/styles/admin-order.css">
    <link rel="stylesheet" href="/styles/dashboard.css">
    <script src="https://cdn.jsdelivr.net/npm/axios@1.6.0/dist/axios.min.js"></script>
</head>
<body>
    <%- include('../../partials/sidebar') %>

    <div class="container">
        <header class="page-header">
            <h1>Order Management</h1>
            <div class="header-stats">
                <span class="stat">Total Orders: <span id="totalOrdersCount"><%= totalOrders %></span></span>
            </div>
        </header>

        <!-- Search and Filter Section -->
        <div class="filters-section">
            <form id="filterForm" class="filters-form">
                <div class="search-group">
                    <input
                        type="text"
                        id="searchInput"
                        name="search"
                        placeholder="Search by Order ID, Customer Name, Product Name, or Brand..."
                        value="<%= search %>"
                        class="search-input"
                    >
                    <button type="submit" class="search-btn">Search</button>
                </div>

                <div class="filter-group">
                    <select id="statusFilter" name="status" class="filter-select">
                        <option value="">All Statuses</option>
                        <% statuses.forEach(statusOption => { %>
                            <option value="<%= statusOption %>" <%= status === statusOption ? 'selected' : '' %>>
                                <%= statusOption %>
                            </option>
                        <% }) %>
                    </select>

                    <select id="sortBy" name="sortBy" class="filter-select">
                        <option value="createdAt" <%= sortBy === 'createdAt' ? 'selected' : '' %>>Date</option>
                        <option value="totalAmount" <%= sortBy === 'totalAmount' ? 'selected' : '' %>>Amount</option>
                        <option value="orderStatus" <%= sortBy === 'orderStatus' ? 'selected' : '' %>>Status</option>
                    </select>

                    <select id="sortOrder" name="sortOrder" class="filter-select">
                        <option value="desc" <%= sortOrder === 'desc' ? 'selected' : '' %>>Descending</option>
                        <option value="asc" <%= sortOrder === 'asc' ? 'selected' : '' %>>Ascending</option>
                    </select>
                </div>
            </form>
        </div>

        <!-- Orders Table -->
        <div class="table-container">
            <table class="orders-table">
                <thead>
                    <tr>
                        <th>Order ID</th>
                        <th>Customer</th>
                        <th>Date</th>
                        <th>Status</th>
                        <th>Payment</th>
                        <th>Total</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="ordersTableBody">
                    <!-- Orders will be dynamically loaded here by JavaScript -->
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        <div class="pagination-container">
            <div class="pagination-info" id="paginationInfo">
                <!-- Pagination info will be dynamically loaded here by JavaScript -->
            </div>
            <div class="pagination" id="paginationControls">
                <!-- Pagination buttons will be dynamically loaded here by JavaScript -->
            </div>
        </div>
    </div>

    <!-- Order Details Modal -->
    <div id="orderModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="modalTitle">Order Details</h2>
                <span class="close" onclick="closeModal()">&times;</span>
            </div>
            <div class="modal-body" id="modalBody">
                <!-- Order details will be loaded here -->
            </div>
        </div>
    </div>

    <!-- Enhanced Confirmation Modal -->
    <div id="confirmationModal" class="confirmation-modal">
        <div class="confirmation-modal-content">
            <h3 id="confirmationTitle">Confirm Action</h3>
            <p id="confirmationMessage">Are you sure you want to proceed?</p>
            <div id="rejectionReasonContainer" style="display: none;">
                <textarea
                    id="rejectionReasonInput"
                    class="rejection-reason-input"
                    placeholder="Please provide a reason for rejecting this return request..."
                    maxlength="500"
                ></textarea>
                <div style="text-align: right; font-size: 12px; color: #6b7280;">
                    <span id="rejectionCharCount">0</span>/500 characters
                </div>
            </div>
            <div class="confirmation-modal-buttons">
                <button class="btn-cancel" onclick="closeConfirmationModal()">Cancel</button>
                <button class="btn-confirm" id="confirmationButton" onclick="executeConfirmedAction()">Confirm</button>
            </div>
        </div>
    </div>

    <!-- Loading Spinner -->
    <div id="loadingSpinner" class="loading-spinner">
        <div class="spinner"></div>
    </div>

    <!-- Toast Container -->
    <div id="toastContainer" class="toast-container"></div>

    <script>
        // Global variables
        const currentFilters = {
            search: "<%= search %>",
            status: "<%= status %>",
            sortBy: "<%= sortBy %>",
            sortOrder: "<%= sortOrder %>",
            page: <%= currentPage %>
        };
        let pendingAction = null;
        let currentOrderIdInModal = null; // To keep track of the order currently in the modal
        const axios = window.axios;

        // Initialize event listeners when DOM is loaded
        document.addEventListener("DOMContentLoaded", () => {
            initializeEventListeners();
            initializeCharacterCounters();
            fetchAndRenderOrders(); // Initial load of orders
        });

        // Initialize all event listeners
        function initializeEventListeners() {
            const filterForm = document.getElementById("filterForm");
            const searchInput = document.getElementById("searchInput");
            const statusFilter = document.getElementById("statusFilter");
            const sortBy = document.getElementById("sortBy");
            const sortOrder = document.getElementById("sortOrder");

            // Form submission
            if (filterForm) {
                filterForm.addEventListener("submit", (e) => {
                    e.preventDefault();
                    applyFilters();
                });
            }

            // Real-time filtering on select changes
            if (statusFilter) statusFilter.addEventListener("change", applyFilters);
            if (sortBy) sortBy.addEventListener("change", applyFilters);
            if (sortOrder) sortOrder.addEventListener("change", applyFilters);

            // Search on Enter key
            if (searchInput) {
                searchInput.addEventListener("keypress", (e) => {
                    if (e.key === "Enter") {
                        e.preventDefault();
                        applyFilters();
                    }
                });
            }

            // Modal close events
            window.onclick = (event) => {
                const orderModal = document.getElementById("orderModal");
                const confirmationModal = document.getElementById("confirmationModal");
                if (event.target === orderModal) {
                    closeModal();
                }
                if (event.target === confirmationModal) {
                    closeConfirmationModal();
                }
            };
        }

        // Initialize character counters
        function initializeCharacterCounters() {
            const rejectionInput = document.getElementById("rejectionReasonInput");
            const charCount = document.getElementById("rejectionCharCount");
            if (rejectionInput && charCount) {
                rejectionInput.addEventListener("input", function () {
                    charCount.textContent = this.value.length;
                });
            }
        }

        // ==================== DYNAMIC RENDERING FUNCTIONS ====================

        // Fetch and render orders table and pagination
        async function fetchAndRenderOrders() {
            showLoading();
            try {
                const params = new URLSearchParams();
                if (currentFilters.search) params.append("search", currentFilters.search);
                if (currentFilters.status) params.append("status", currentFilters.status);
                if (currentFilters.sortBy) params.append("sortBy", currentFilters.sortBy);
                if (currentFilters.sortOrder) params.append("sortOrder", currentFilters.sortOrder);
                params.append("page", currentFilters.page);

                const response = await axios.get(`/admin/orders/data?${params.toString()}`);
                const { orders, totalOrders, currentPage, totalPages, limit } = response.data;
                console.log(response.data);
                // Update total orders count in header
                document.getElementById("totalOrdersCount").textContent = totalOrders;

                // Render table body
                const ordersTableBody = document.getElementById("ordersTableBody");
                ordersTableBody.innerHTML = ""; // Clear existing rows

                if (orders.length === 0) {
                    ordersTableBody.innerHTML = '<tr><td colspan="7" class="no-data">No orders found</td></tr>';
                } else {
                    orders.forEach(order => {
                        const row = document.createElement("tr");
                        row.innerHTML = `
                            <td class="order-id">#${order.orderId}</td>
                            <td>
                                <div class="customer-info">
                                    <div class="customer-name">${order.userId?.name || order.shippingAddress.fullName}</div>
                                    <div class="customer-email">${order.userId?.email || 'N/A'}</div>
                                </div>
                            </td>
                            <td>${new Date(order.createdAt).toLocaleDateString()}</td>
                            <td>
                                <span class="status-badge status-${order.orderStatus.toLowerCase().replace(/\s+/g, '-')}">
                                    ${order.orderStatus}
                                </span>
                            </td>
                            <td>
                                <div class="payment-info">
                                    <div class="payment-method">${order.paymentMethod}</div>
                                    <div class="payment-status status-${order.paymentStatus.toLowerCase()}">
                                        ${order.paymentStatus}
                                    </div>
                                </div>
                            </td>
                            <td class="amount">
                                ₹${order.totalAmount.toFixed(2)}
                                ${order.refundedAmount > 0 ? `<br><small style="color: #ef4444;">Refunded: ₹${order.refundedAmount.toFixed(2)}</small>` : ''}
                            </td>
                            <td>
                                <button
                                    class="btn btn-primary view-details-btn"
                                    onclick="viewOrderDetails('${order._id}')"
                                >
                                    View Details
                                </button>
                            </td>
                        `;
                        ordersTableBody.appendChild(row);
                    });
                }

                // Render pagination controls
                const paginationInfo = document.getElementById("paginationInfo");
                const paginationControls = document.getElementById("paginationControls");

                paginationInfo.textContent = `Showing ${(currentPage - 1) * limit + 1} to ${Math.min(currentPage * limit, totalOrders)} of ${totalOrders} orders`;
                paginationControls.innerHTML = ""; // Clear existing buttons

                if (currentPage > 1) {
                    paginationControls.innerHTML += `<button class="pagination-btn" onclick="goToPage(${currentPage - 1})">Previous</button>`;
                }

                for (let i = Math.max(1, currentPage - 2); i <= Math.min(totalPages, currentPage + 2); i++) {
                    paginationControls.innerHTML += `
                        <button
                            class="pagination-btn ${i === currentPage ? 'active' : ''}"
                            onclick="goToPage(${i})"
                        >
                            ${i}
                        </button>
                    `;
                }

                if (currentPage < totalPages) {
                    paginationControls.innerHTML += `<button class="pagination-btn" onclick="goToPage(${currentPage + 1})">Next</button>`;
                }

            } catch (error) {
                console.error("Error fetching and rendering orders:", error);
                const errorMessage = error.response?.data?.error || "Error fetching orders";
                showToast(errorMessage, "error");
            } finally {
                hideLoading();
            }
        }

        // ==================== FILTER AND PAGINATION FUNCTIONS ====================
        // Apply filters and reload page
        function applyFilters() {
            currentFilters.search = document.getElementById("searchInput")?.value || "";
            currentFilters.status = document.getElementById("statusFilter")?.value || "";
            currentFilters.sortBy = document.getElementById("sortBy")?.value || "";
            currentFilters.sortOrder = document.getElementById("sortOrder")?.value || "";
            currentFilters.page = 1; // Reset to first page on filter change
            fetchAndRenderOrders();
        }

        // Pagination
        function goToPage(page) {
            currentFilters.page = page;
            fetchAndRenderOrders();
        }

        // ==================== ORDER DETAILS AND MODAL FUNCTIONS ====================
        // View order details
        async function viewOrderDetails(orderId) {
            showLoading();
            currentOrderIdInModal = orderId; // Store the ID of the order being viewed
            try {
                const response = await axios.get(`/admin/orders/${orderId}`);
                displayOrderDetails(response.data.order);
                showModal();
            } catch (error) {
                console.error("Error fetching order details:", error);
                const errorMessage = error.response?.data?.error || "Error fetching order details";
                showToast(errorMessage, "error");
            } finally {
                hideLoading();
            }
        }

        // Display order details in modal
        function displayOrderDetails(order) {
            const modalBody = document.getElementById("modalBody");
            const modalTitle = document.getElementById("modalTitle");
            modalTitle.textContent = `Order #${order.orderId}`;
            const returnRequests = order.items.filter((item) => item.status === "Return Requested");
            modalBody.innerHTML = generateOrderDetailsHTML(order, returnRequests);
            // Set current status data attributes for payment selects
            setTimeout(() => {
                setPaymentStatusDataAttributes(order);
            }, 100);
        }

        // Generate order details HTML
        function generateOrderDetailsHTML(order, returnRequests) {
            return `
                <div class="order-details">
                    ${generateCustomerInfoSection(order)}
                    ${generateAddressSection(order)}
                    ${generateOrderStatusSection(order)}
                    ${generatePaymentInfoSection(order)}
                    ${returnRequests.length > 0 ? generateReturnRequestsSection(order._id, returnRequests) : ""}
                    ${generateOrderItemsSection(order)}
                    ${generateOrderSummarySection(order)}
                    ${generateTimelineSection(order)}
                </div>
            `;
        }

        // Generate customer information section
        function generateCustomerInfoSection(order) {
            return `
                <div class="detail-section">
                    <h3>Customer Information</h3>
                    <div class="detail-grid">
                        <div class="detail-item">
                            <label>Name:</label>
                            <span>${order.userId?.name || order.shippingAddress.fullName}</span>
                        </div>
                        <div class="detail-item">
                            <label>Email:</label>
                            <span>${order.userId?.email || "N/A"}</span>
                        </div>
                        <div class="detail-item">
                            <label>Phone:</label>
                            <span>${order.userId?.phone || order.shippingAddress.phone}</span>
                        </div>
                    </div>
                </div>
            `;
        }

        // Generate address section
        function generateAddressSection(order) {
            return `
                <div class="detail-section">
                    <h3>Shipping Address (${order.shippingAddress.addressName})</h3>
                    <div class="address">
                        <strong>${order.shippingAddress.fullName}</strong><br>
                        ${order.shippingAddress.addressLine}<br>
                        ${order.shippingAddress.landmark ? order.shippingAddress.landmark + "<br>" : ""}
                        ${order.shippingAddress.city}, ${order.shippingAddress.state}<br>
                        ${order.shippingAddress.country} - ${order.shippingAddress.pincode}<br>
                        Phone: ${order.shippingAddress.phone}
                    </div>
                </div>
            `;
        }

        // Generate order status section
        function generateOrderStatusSection(order) {
            const statusOptions = [
                "Pending",
                "Placed",
                "Shipped",
                "Delivered",
                "Cancelled",
                "Partially Cancelled",
                "Return Requested",
                "Partially Returned",
                "Returned",
                "Return Approved",
                "Partially Return Approved",
            ];
            return `
                <div class="detail-section">
                    <h3>Order Status</h3>
                    <div class="status-update">
                        <select id="orderStatusSelect" class="status-select">
                            ${statusOptions
                                .map(
                                    (status) =>
                                        `<option value="${status}" ${order.orderStatus === status ? "selected" : ""}>${status}</option>`,
                                )
                                .join("")}
                        </select>
                        <button class="btn btn-primary" onclick="updateOrderStatus('${order._id}')">Update Status</button>
                        ${
                            !order.orderStatus.includes("Cancelled") && !order.orderStatus.includes("Delivered")
                                ? `<button class="btn btn-danger" onclick="showCancelOrderConfirmation('${order._id}')">Cancel Order</button>`
                                : ""
                        }
                    </div>
                </div>
            `;
        }

        // Generate payment information section
        function generatePaymentInfoSection(order) {
            const paymentStatusOptions = ["Pending", "Paid", "Failed", "Refunded", "Cancelled"];
            return `
                <div class="detail-section">
                    <h3>💳 Payment Information</h3>
                    <div class="payment-status-section">
                        <div class="payment-info-grid">
                            <div class="payment-info-item">
                                <span class="payment-info-label">Payment Method:</span>
                                <span class="payment-info-value">${order.paymentMethod}</span>
                            </div>
                            <div class="payment-info-item">
                                <span class="payment-info-label">Current Status:</span>
                                <span class="payment-status-badge ${order.paymentStatus.toLowerCase()}">${order.paymentStatus}</span>
                            </div>
                            <div class="payment-info-item">
                                <span class="payment-info-label">Payment ID:</span>
                                <span class="payment-info-value">${order.paymentDetails?.transactionId || "N/A"}</span>
                            </div>
                            <div class="payment-info-item">
                                <span class="payment-info-label">Amount:</span>
                                <div class="payment-amount-info">
                                    <span class="amount">₹${order.totalAmount.toLocaleString()}</span>
                                    ${order.refundedAmount > 0 ? `<span class="refund-amount">-₹${order.refundedAmount.toLocaleString()}</span>` : ""}
                                </div>
                            </div>
                        </div>

                        <div class="payment-section-divider"></div>

                        <div class="payment-status-update">
                            <select id="orderPaymentStatusSelect" class="payment-status-select" data-current-status="${order.paymentStatus}">
                                ${paymentStatusOptions
                                    .map(
                                        (status) =>
                                            `<option value="${status}" ${order.paymentStatus === status ? "selected" : ""}>${status}</option>`,
                                    )
                                    .join("")}
                            </select>
                            <button class="btn btn-primary" onclick="updateOrderPaymentStatus('${order._id}')">Update Payment Status</button>
                        </div>
                    </div>
                </div>
            `;
        }

        // Generate return requests section
        function generateReturnRequestsSection(orderId, returnRequests) {
            return `
                <div class="detail-section" id="returnRequestsSection">
                    <h3>🔄 Pending Return Requests (${returnRequests.length})</h3>
                    <div class="items-list">
                        ${returnRequests
                            .map(
                                (item) => `
                            <div class="item-card return-request-card" id="return-item-${item._id}">
                                <div class="item-info">
                                    <h4>${item.productName}</h4>
                                    <p><strong>Brand:</strong> ${item.brand}</p>
                                    <p><strong>Qty:</strong> ${item.quantity}</p>
                                    <p><strong>Price:</strong> ₹${(item.price * item.quantity).toLocaleString()}</p>
                                    <p><strong>Return Reason:</strong> ${item.returnReason || "N/A"}</p>
                                    <p><strong>Requested On:</strong> ${item.returnRequestedAt ? new Date(item.returnRequestedAt).toLocaleDateString() : "N/A"}</p>
                                    <div class="return-actions">
                                        <button class="btn-approve" onclick="showApproveReturnConfirmation('${orderId}', '${item._id}', '${item.productName}', ${item.price * item.quantity})">
                                            ✅ Approve & Refund
                                        </button>
                                        <button class="btn-reject" onclick="showRejectReturnConfirmation('${orderId}', '${item._id}', '${item.productName}')">
                                            ❌ Reject Request
                                        </button>
                                    </div>
                                </div>
                            </div>
                        `,
                            )
                            .join("")}
                    </div>
                </div>
            `;
        }

        // Generate order items section
        function generateOrderItemsSection(order) {
            const itemStatusOptions = [
                "Placed",
                "Shipped",
                "Delivered",
                "Cancelled",
                "Return Requested",
                "Return Approved",
                "Return Rejected",
            ];
            const paymentStatusOptions = ["Pending", "Paid", "Failed", "Refunded", "Cancelled"];
            return `
                <div class="detail-section">
                    <h3>Order Items</h3>
                    <div class="items-list">
                        ${order.items
                            .map(
                                (item) => `
                            <div class="item-card">
                                <div class="item-image">
                                    <img src="${item.image?.url || "/placeholder.svg?height=64&width=64"}" alt="${item.productName}" />
                                </div>
                                <div class="item-info">
                                    <h4>${item.productName}</h4>
                                    <p><strong>Brand:</strong> ${item.brand}</p>
                                    <p><strong>Price:</strong> ₹${item.netItemTotal.toLocaleString()} × ${item.quantity} = ₹${(item.netItemTotal * item.quantity).toLocaleString()}</p>
                                    <p><strong>Status:</strong>
                                        <span class="status-badge status-${item.status.toLowerCase().replace(/\s+/g, "-")}">${item.status}</span>
                                        <span class="item-payment-badge ${item.paymentStatus ? item.paymentStatus.toLowerCase() : "pending"}">${item.paymentStatus || "Pending"}</span>
                                    </p>

                                    <div class="item-actions">
                                        <select class="item-status-select" data-item-id="${item._id}">
                                            ${itemStatusOptions
                                                .map(
                                                    (status) =>
                                                        `<option value="${status}" ${item.status === status ? "selected" : ""}>${status}</option>`,
                                                )
                                                .join("")}
                                        </select>
                                        <button class="btn btn-sm btn-primary" onclick="updateItemStatus('${order._id}', '${item._id}')">
                                            Update Item Status
                                        </button>
                                    </div>

                                    <!-- Item Payment Status -->
                                    <div class="item-payment-status">
                                        <div class="payment-info-item">
                                            <span class="payment-info-label">Item Payment Status:</span>
                                            <span class="payment-status-badge ${item.paymentStatus ? item.paymentStatus.toLowerCase() : "pending"}">${item.paymentStatus || "Pending"}</span>
                                        </div>
                                        <div class="item-payment-controls">
                                            <select class="payment-status-select" data-item-payment-id="${item._id}" data-current-status="${item.paymentStatus || "Pending"}">
                                                ${paymentStatusOptions
                                                    .map(
                                                        (status) =>
                                                            `<option value="${status}" ${(item.paymentStatus || "Pending") === status ? "selected" : ""}>${status}</option>`,
                                                    )
                                                    .join("")}
                                            </select>
                                            <button class="btn btn-primary" onclick="updateItemPaymentStatus('${order._id}', '${item._id}')">
                                                Update Payment
                                            </button>
                                        </div>
                                    </div>
                                    ${generateItemStatusBadges(item)}
                                    ${generateItemReasons(item)}
                                </div>
                            </div>
                        `,
                            )
                            .join("")}
                    </div>
                </div>
            `;
        }

        // Generate item status badges
        function generateItemStatusBadges(item) {
            let badges = "";
            if (item.status === "Return Approved") {
                badges += '<span class="status-badge bg-success text-white mt-2">✅ Return Approved & Refunded</span>';
            }
            if (item.status === "Return Rejected") {
                badges += '<span class="status-badge bg-danger text-white mt-2">❌ Return Rejected</span>';
            }
            return badges;
        }

        // Generate item reasons
        function generateItemReasons(item) {
            let reasons = "";
            if (item.cancelReason) {
                reasons += `<div class="reason-info"><p><strong>Cancel Reason:</strong> ${item.cancelReason}</p></div>`;
            }
            if (item.returnReason) {
                reasons += `<div class="reason-info"><p><strong>Return Reason:</strong> ${item.returnReason}</p></div>`;
            }
            if (item.returnRejectionReason) {
                reasons += `<div class="reason-info"><p><strong>Rejection Reason:</strong> ${item.returnRejectionReason}</p></div>`;
            }
            return reasons;
        }

        // Generate order summary section
        function generateOrderSummarySection(order) {
            return `
                <div class="detail-section">
                    <h3>Order Summary</h3>
                    <div class="order-summary">
                        <div class="summary-row"><span>Subtotal:</span><span>₹${order.subtotal.toLocaleString()}</span></div>
                        ${
                            order.coupon?.code
                                ? `<div class="summary-row"><span>Coupon (${order.coupon.code}):</span><span>-₹${order.coupon.discountAmount.toLocaleString()}</span></div>`
                                : ""
                        }
                        <div class="summary-row"><span>Discount:</span><span>-₹${order.discount.toLocaleString()}</span></div>
                        ${
                            order.refundedAmount > 0
                                ? `<div class="summary-row"><span>Refunded:</span><span style="color: #ef4444;">-₹${order.refundedAmount.toLocaleString()}</span></div>`
                                : ""
                        }
                        <div class="summary-row total"><span>Total:</span><span>₹${order.totalAmount.toLocaleString()}</span></div>
                    </div>
                </div>
            `;
        }

        // Generate timeline section
        function generateTimelineSection(order) {
            return `
                <div class="detail-section">
                    <h3>Timeline</h3>
                    <div class="timeline">
                        <div class="timeline-item"><strong>Created:</strong> ${new Date(order.createdAt).toLocaleString()}</div>
                        <div class="timeline-item"><strong>Updated:</strong> ${new Date(order.updatedAt).toLocaleString()}</div>
                        ${
                            order.cancellation?.cancelledAt
                                ? `
                            <div class="timeline-item">
                                <strong>Cancelled:</strong> ${new Date(order.cancellation.cancelledAt).toLocaleString()}
                                <br><strong>By:</strong> ${order.cancellation.cancelledBy}
                                <br><strong>Reason:</strong> ${order.cancellation.reason}
                            </div>
                        `
                                : ""
                        }
                        ${
                            order.returnInfo?.returnedAt
                                ? `
                            <div class="timeline-item">
                                <strong>Return Info:</strong> ${new Date(order.returnInfo.returnedAt).toLocaleString()}
                                <br><strong>Total Requests:</strong> ${order.returnInfo.totalReturnRequests || 0}
                                <br><strong>Approved:</strong> ${order.returnInfo.approvedReturns || 0}
                                <br><strong>Rejected:</strong> ${order.returnInfo.rejectedReturns || 0}
                            </div>
                        `
                                : ""
                        }
                    </div>
                </div>
            `;
        }

        // Set payment status data attributes
        function setPaymentStatusDataAttributes(order) {
            const orderPaymentSelect = document.getElementById("orderPaymentStatusSelect");
            if (orderPaymentSelect) {
                orderPaymentSelect.setAttribute("data-current-status", order.paymentStatus);
            }
            // Set current status for item payment selects
            order.items.forEach((item) => {
                const itemPaymentSelect = document.querySelector(`[data-item-payment-id="${item._id}"]`);
                if (itemPaymentSelect) {
                    itemPaymentSelect.setAttribute("data-current-status", item.paymentStatus || "Pending");
                }
            });
        }

        // ==================== ORDER STATUS UPDATE FUNCTIONS ====================
        // Update order status
        async function updateOrderStatus(orderId) {
            const newStatus = document.getElementById("orderStatusSelect").value;
            showLoading();
            try {
                const response = await axios.put(`/admin/orders/${orderId}/status`, {
                    status: newStatus,
                });
                showToast("Order status updated successfully!", "success");
                // Refresh the main order list and the modal if open
                fetchAndRenderOrders();
                if (currentOrderIdInModal === orderId && document.getElementById("orderModal").style.display === "block") {
                    viewOrderDetails(orderId);
                }
            } catch (error) {
                console.error("Error updating order status:", error);
                const errorMessage = error.response?.data?.error || "Error updating order status";
                showToast(errorMessage, "error");
            } finally {
                hideLoading();
            }
        }

        // Update item status
        async function updateItemStatus(orderId, itemId) {
            const selectElement = document.querySelector(`[data-item-id="${itemId}"]`);
            const newStatus = selectElement.value;
            let reason = "";
            if (newStatus === "Cancelled" || newStatus === "Return Requested") {
                reason = prompt(`Please enter reason for ${newStatus.toLowerCase()}:`);
                if (!reason) return;
            }
            showLoading();
            try {
                const response = await axios.put(`/admin/orders/${orderId}/items/${itemId}/status`, {
                    status: newStatus,
                    reason: reason,
                });
                showToast("Item status updated successfully!", "success");
                // Refresh the modal with updated data
                if (currentOrderIdInModal === orderId && document.getElementById("orderModal").style.display === "block") {
                    viewOrderDetails(orderId);
                }
                fetchAndRenderOrders(); // Also refresh the main list in case order status changed
            } catch (error) {
                console.error("Error updating item status:", error);
                const errorMessage = error.response?.data?.error || "Error updating item status";
                showToast(errorMessage, "error");
            } finally {
                hideLoading();
            }
        }

        // ==================== PAYMENT STATUS UPDATE FUNCTIONS ====================
        // Update order payment status
        async function updateOrderPaymentStatus(orderId) {
            const newPaymentStatus = document.getElementById("orderPaymentStatusSelect").value;
            const currentStatus = document.getElementById("orderPaymentStatusSelect").getAttribute("data-current-status");
            if (newPaymentStatus === currentStatus) {
                showToast("Payment status is already set to this value", "info");
                return;
            }
            // Show confirmation for critical status changes
            if (newPaymentStatus === "Refunded" || newPaymentStatus === "Failed") {
                showConfirmationModal(
                    "Update Payment Status",
                    `Are you sure you want to change the payment status to "${newPaymentStatus}"? This action may affect the order processing.`,
                    () => processOrderPaymentStatusUpdate(orderId, newPaymentStatus),
                    "warning",
                );
            } else {
                processOrderPaymentStatusUpdate(orderId, newPaymentStatus);
            }
        }

        // Process order payment status update
        async function processOrderPaymentStatusUpdate(orderId, newPaymentStatus) {
            showLoading();
            try {
                const response = await axios.put(`/admin/orders/${orderId}/payment-status`, {
                    paymentStatus: newPaymentStatus,
                });
                const message = response.data.message || "Order payment status updated successfully!";
                showToast(message, "success");
                // Update the badge in the modal
                const paymentBadge = document.querySelector(".payment-status-badge");
                if (paymentBadge) {
                    paymentBadge.className = `payment-status-badge ${newPaymentStatus.toLowerCase()}`;
                    paymentBadge.textContent = newPaymentStatus;
                }
                // Refresh the modal with updated data
                if (currentOrderIdInModal === orderId && document.getElementById("orderModal").style.display === "block") {
                    viewOrderDetails(orderId);
                }
                fetchAndRenderOrders(); // Also refresh the main list
            } catch (error) {
                console.error("Error updating order payment status:", error);
                const errorMessage = error.response?.data?.error || "Error updating order payment status";
                showToast(errorMessage, "error");
                // Reset the select to previous value
                const select = document.getElementById("orderPaymentStatusSelect");
                select.value = select.getAttribute("data-current-status");
            } finally {
                hideLoading();
            }
        }

        // Update item payment status
        async function updateItemPaymentStatus(orderId, itemId) {
            const selectElement = document.querySelector(`[data-item-payment-id="${itemId}"]`);
            const newPaymentStatus = selectElement.value;
            const currentStatus = selectElement.getAttribute("data-current-status");
            if (newPaymentStatus === currentStatus) {
                showToast("Item payment status is already set to this value", "info");
                return;
            }
            // Show confirmation for critical status changes
            if (newPaymentStatus === "Refunded" || newPaymentStatus === "Failed") {
                showConfirmationModal(
                    "Update Item Payment Status",
                    `Are you sure you want to change the item payment status to "${newPaymentStatus}"? This action may affect the item processing.`,
                    () => processItemPaymentStatusUpdate(orderId, itemId, newPaymentStatus),
                    "warning",
                );
            } else {
                processItemPaymentStatusUpdate(orderId, itemId, newPaymentStatus);
            }
        }

        // Process item payment status update
        async function processItemPaymentStatusUpdate(orderId, itemId, newPaymentStatus) {
            showLoading();
            try {
                const response = await axios.put(`/admin/orders/${orderId}/items/${itemId}/payment-status`, {
                    paymentStatus: newPaymentStatus,
                });
                const message = response.data.message || "Item payment status updated successfully!";
                showToast(message, "success");
                // Update the item payment badge in the modal
                const itemBadge = document.querySelector(`[data-item-id="${itemId}"] .item-payment-badge`);
                if (itemBadge) {
                    itemBadge.className = `item-payment-badge ${newPaymentStatus.toLowerCase()}`;
                    itemBadge.textContent = newPaymentStatus;
                }
                // Update the item payment section badge
                const itemPaymentBadge = document
                    .querySelector(`[data-item-payment-id="${itemId}"]`)
                    .closest(".item-payment-status")
                    .querySelector(".payment-status-badge");
                if (itemPaymentBadge) {
                    itemPaymentBadge.className = `payment-status-badge ${newPaymentStatus.toLowerCase()}`;
                    itemPaymentBadge.textContent = newPaymentStatus;
                }
                // Refresh the modal with updated data
                if (currentOrderIdInModal === orderId && document.getElementById("orderModal").style.display === "block") {
                    viewOrderDetails(orderId);
                }
                fetchAndRenderOrders(); // Also refresh the main list
            } catch (error) {
                console.error("Error updating item payment status:", error);
                const errorMessage = error.response?.data?.error || "Error updating item payment status";
                showToast(errorMessage, "error");
                // Reset the select to previous value
                const selectElement = document.querySelector(`[data-item-payment-id="${itemId}"]`);
                selectElement.value = selectElement.getAttribute("data-current-status");
            } finally {
                hideLoading();
            }
        }

        // ==================== RETURN REQUEST FUNCTIONS ====================
        // Show approve return confirmation
        function showApproveReturnConfirmation(orderId, itemId, productName, refundAmount) {
            showConfirmationModal(
                "Approve Return Request",
                `Are you sure you want to approve the return for "${productName}"?\n\nThis will refund ₹${refundAmount.toLocaleString("en-IN")} to the customer's wallet and restore the product stock.`,
                () => approveReturn(orderId, itemId),
                "approve",
            );
        }

        // Show reject return confirmation
        function showRejectReturnConfirmation(orderId, itemId, productName) {
            showConfirmationModal(
                "Reject Return Request",
                `Are you sure you want to reject the return request for "${productName}"?\n\nPlease provide a reason for rejection:`,
                () => {
                    const rejectionReason = document.getElementById("rejectionReasonInput").value.trim();
                    if (!rejectionReason) {
                        showToast("Please provide a rejection reason", "error");
                        return;
                    }
                    rejectReturn(orderId, itemId, rejectionReason);
                },
                "reject",
                true,
            );
        }

        // Approve return
        async function approveReturn(orderId, itemId) {
            showLoading();
            try {
                const response = await axios.post(`/admin/orders/${orderId}/items/${itemId}/approve-return`);
                const message = response.data.message || "Return approved successfully!";
                showToast(message, "success");
                // Refresh modal data after a short delay
                if (currentOrderIdInModal === orderId && document.getElementById("orderModal").style.display === "block") {
                    viewOrderDetails(orderId);
                }
                fetchAndRenderOrders(); // Also refresh the main list
            } catch (error) {
                console.error("Error approving return:", error);
                const errorMessage = error.response?.data?.error || "Unknown error occurred during return approval.";
                showToast(errorMessage, "error");
            } finally {
                hideLoading();
            }
        }

        // Reject return
        async function rejectReturn(orderId, itemId, rejectionReason) {
            showLoading();
            try {
                const response = await axios.post(`/admin/orders/${orderId}/items/${itemId}/reject-return`, {
                    rejectionReason: rejectionReason,
                });
                const message = response.data.message || "Return request rejected successfully!";
                showToast(message, "warning");
                // Refresh modal data after a short delay
                if (currentOrderIdInModal === orderId && document.getElementById("orderModal").style.display === "block") {
                    viewOrderDetails(orderId);
                }
                fetchAndRenderOrders(); // Also refresh the main list
            } catch (error) {
                console.error("Error rejecting return:", error);
                const errorMessage = error.response?.data?.error || "Unknown error occurred during return rejection.";
                showToast(errorMessage, "error");
            } finally {
                hideLoading();
            }
        }

        // ==================== ORDER CANCELLATION FUNCTIONS ====================
        // Show cancel order confirmation
        function showCancelOrderConfirmation(orderId) {
            showConfirmationModal(
                "Cancel Order",
                "Are you sure you want to cancel this entire order? This action cannot be undone.",
                () => {
                    const reason = prompt("Please enter cancellation reason:");
                    if (reason) {
                        cancelOrder(orderId, reason);
                    }
                },
            );
        }

        // Cancel order
        async function cancelOrder(orderId, reason) {
            showLoading();
            try {
                const response = await axios.put(`/admin/orders/${orderId}/cancel`, {
                    reason: reason,
                });
                showToast("Order cancelled successfully!", "success");
                // Refresh the main order list and close modal if open
                fetchAndRenderOrders();
                if (currentOrderIdInModal === orderId && document.getElementById("orderModal").style.display === "block") {
                    closeModal(); // Close modal as the entire order is cancelled
                }
            } catch (error) {
                console.error("Error cancelling order:", error);
                const errorMessage = error.response?.data?.error || "Error cancelling order";
                showToast(errorMessage, "error");
            } finally {
                hideLoading();
            }
        }

        // ==================== MODAL AND UI UTILITY FUNCTIONS ====================
        // Show confirmation modal
        function showConfirmationModal(title, message, onConfirm, type = "default", showRejectionInput = false) {
            document.getElementById("confirmationTitle").textContent = title;
            document.getElementById("confirmationMessage").textContent = message;
            const confirmButton = document.getElementById("confirmationButton");
            const rejectionContainer = document.getElementById("rejectionReasonContainer");
            const rejectionInput = document.getElementById("rejectionReasonInput");
            // Reset rejection input
            rejectionInput.value = "";
            document.getElementById("rejectionCharCount").textContent = "0";
            if (showRejectionInput) {
                rejectionContainer.style.display = "block";
            } else {
                rejectionContainer.style.display = "none";
            }
            // Style the confirm button based on type
            confirmButton.className = `btn-confirm ${type}`;
            if (type === "approve") {
                confirmButton.textContent = "Approve Return";
            } else if (type === "reject") {
                confirmButton.textContent = "Reject Return";
            } else {
                confirmButton.textContent = "Confirm";
            }
            pendingAction = onConfirm;
            document.getElementById("confirmationModal").style.display = "block";
        }

        // Close confirmation modal
        function closeConfirmationModal() {
            document.getElementById("confirmationModal").style.display = "none";
            document.getElementById("rejectionReasonContainer").style.display = "none";
            pendingAction = null;
        }

        // Execute confirmed action
        function executeConfirmedAction() {
            if (pendingAction) {
                pendingAction();
                closeConfirmationModal();
            }
        }

        // Show toast notification
        function showToast(message, type = "info") {
            const toast = document.createElement("div");
            toast.className = `toast ${type}`;
            const iconMap = {
                success: "✓",
                error: "✕",
                warning: "⚠",
                info: "ℹ",
            };
            toast.innerHTML = `
                <span class="toast-icon">${iconMap[type] || "ℹ"}</span>
                <span class="toast-message">${message}</span>
                <button class="toast-close" onclick="this.parentElement.remove()">×</button>
            `;
            document.getElementById("toastContainer").appendChild(toast);
            // Auto remove after 5 seconds
            setTimeout(() => {
                if (toast.parentElement) {
                    toast.remove();
                }
            }, 5000);
        }

        // Show modal
        function showModal() {
            document.getElementById("orderModal").style.display = "block";
            document.body.style.overflow = "hidden";
        }

        // Close modal
        function closeModal() {
            document.getElementById("orderModal").style.display = "none";
            document.body.style.overflow = "auto";
            currentOrderIdInModal = null; // Clear the stored order ID
        }

        // Show loading spinner
        function showLoading() {
            document.getElementById("loadingSpinner").style.display = "flex";
        }

        // Hide loading spinner
        function hideLoading() {
            document.getElementById("loadingSpinner").style.display = "none";
        }
    </script>
</body>
</html>
