<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title><%= title %> - Admin Dashboard</title>
		<link
			href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
			rel="stylesheet"
		/>
		<link rel="stylesheet" href="/styles/dashboard.css" />
		<link rel="stylesheet" href="/styles/admin-stock-registry.css" />
	</head>
	<body>
		<%- include('../../partials/sidebar') %>

		<div class="main-container">
			<div class="header">
				<div>
					<h1 class="page-title">
						<i class="fas fa-boxes"></i>
						Stock Management
					</h1>
				</div>
				<div class="search-section">
					<div class="search-box">
						<i class="fas fa-search search-icon"></i>
						<input
							type="text"
							class="search-input"
							id="searchInput"
							placeholder="Search products, brands, SKU..."
						/>
					</div>
					<button class="btn btn-primary" onclick="performSearch()">
						<i class="fas fa-search"></i> Search
					</button>
					<button class="btn btn-secondary" onclick="clearFilters()">
						<i class="fas fa-times"></i> Clear
					</button>
				</div>
			</div>

			<div class="filters-section">
				<div class="filters-row">
					<div class="filter-group">
						<label class="filter-label"> Category: </label>
						<select class="filter-select" id="categoryFilter">
							<option value="">All Categories</option>
							<% categories.forEach(category => { %>
							<option value="<%= category._id %>">
								<%= category.categoryName %>
							</option>
							<% }); %>
						</select>
					</div>

					<div class="filter-group">
						<label class="filter-label"> Price Range: </label>
						<div class="price-inputs">
							<input
								type="number"
								class="filter-input"
								id="minPrice"
								placeholder="Min ₹"
								min="0"
							/>
							<input
								type="number"
								class="filter-input"
								id="maxPrice"
								placeholder="Max ₹"
								min="0"
							/>
						</div>
					</div>

					<div class="filter-group">
						<label class="filter-label"> Stock Status: </label>
						<select class="filter-select" id="stockFilter">
							<option value="all">All Stock</option>
							<option value="in">In Stock</option>
							<option value="low">Low Stock</option>
							<option value="out">Out of Stock</option>
						</select>
					</div>

					<div class="sort-section">
						<button
							class="sort-btn active"
							data-sort="name"
							data-order="asc"
						>
							A-Z
						</button>
						<button
							class="sort-btn"
							data-sort="name"
							data-order="desc"
						>
							Z-A
						</button>
						<button
							class="sort-btn"
							data-sort="price"
							data-order="asc"
						>
							₹ Low
						</button>
						<button
							class="sort-btn"
							data-sort="price"
							data-order="desc"
						>
							₹ High
						</button>
					</div>
				</div>
			</div>

			<div class="table-container">
				<table class="table">
					<thead>
						<tr>
							<th>Product</th>
							<th>SKU</th>
							<th>Category</th>
							<th>Brand</th>
							<th>Price</th>
							<th>Stock</th>
							<th>Status</th>
							<th>Actions</th>
						</tr>
					</thead>
					<tbody id="stockTableBody">
						<tr>
							<td colspan="8" class="loading">
								<i class="fas fa-spinner fa-spin"></i>
								<div>Loading products...</div>
							</td>
						</tr>
					</tbody>
				</table>

				<div class="pagination" id="paginationSection">
					<div class="pagination-info" id="paginationInfo">
						Showing 0 of 0 products
					</div>
					<div class="pagination-controls" id="paginationControls">
						<!-- Pagination buttons will be inserted here -->
					</div>
				</div>
			</div>
		</div>

		<!-- Stock Registry Modal -->
		<div id="stockModal" class="modal-overlay" style="display: none;">
			<div class="modal">
				<div class="modal-header">
					<h2><i class="fas fa-history"></i> Stock History</h2>
					<button class="close-btn" onclick="closeStockModal()">
						×
					</button>
				</div>
				<div class="modal-body">
					<table class="table">
						<thead>
							<tr>
								<th><i class="fas fa-calendar"></i> Date</th>
								<th>
									<i class="fas fa-exchange-alt"></i> Action
								</th>
								<th>
									<i class="fas fa-sort-numeric-up"></i>
									Quantity
								</th>
								<th><i class="fas fa-comment"></i> Reason</th>
								<th>
									<i class="fas fa-user"></i> Performed By
								</th>
							</tr>
						</thead>
						<tbody id="stockRegistryBody">
							<tr>
								<td colspan="5" class="loading">
									<i class="fas fa-spinner fa-spin"></i>
									<div>Loading...</div>
								</td>
							</tr>
						</tbody>
					</table>
				</div>
			</div>
		</div>

		<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
		<script>
						let currentPage = 1;
			let currentFilters = {
			    search: '',
			    category: '',
			    minPrice: '',
			    maxPrice: '',
			    stockStatus: 'all',
			    sortBy: 'name',
			    sortOrder: 'asc'
			};

			// Initialize page
			document.addEventListener('DOMContentLoaded', function() {
			    loadStockData();
			    setupEventListeners();
			    showLoadingAnimation();
			});

			function showLoadingAnimation() {
			    const tbody = document.getElementById('stockTableBody');
			    tbody.innerHTML = `
			        <tr>
			            <td colspan="8" class="loading">
			                <i class="fas fa-spinner fa-spin"></i>
			                <div>Loading products...</div>
			            </td>
			        </tr>
			    `;
			}

			function setupEventListeners() {
			    // Search input with debounce
			    let searchTimeout;
			    document.getElementById('searchInput').addEventListener('input', function(e) {
			        clearTimeout(searchTimeout);
			        searchTimeout = setTimeout(() => {
			            performSearch();
			        }, 500);
			    });

			    // Enter key search
			    document.getElementById('searchInput').addEventListener('keypress', function(e) {
			        if (e.key === 'Enter') {
			            clearTimeout(searchTimeout);
			            performSearch();
			        }
			    });

			    // Filter changes
			    document.getElementById('categoryFilter').addEventListener('change', applyFilters);
			    document.getElementById('minPrice').addEventListener('change', applyFilters);
			    document.getElementById('maxPrice').addEventListener('change', applyFilters);
			    document.getElementById('stockFilter').addEventListener('change', applyFilters);

			    // Sort buttons
			    document.querySelectorAll('.sort-btn').forEach(btn => {
			        btn.addEventListener('click', function() {
			            document.querySelectorAll('.sort-btn').forEach(b => b.classList.remove('active'));
			            this.classList.add('active');

			            if (this.dataset.sort === 'lowStock') {
			                currentFilters.sortBy = 'stock';
			                currentFilters.sortOrder = 'asc';
			            } else {
			                currentFilters.sortBy = this.dataset.sort;
			                currentFilters.sortOrder = this.dataset.order;
			            }
			            currentPage = 1;
			            loadStockData();
			        });
			    });

			    // Modal close on outside click
			    document.getElementById('stockModal').addEventListener('click', function(e) {
			        if (e.target === this) {
			            closeStockModal();
			        }
			    });
			}

			function performSearch() {
			    currentFilters.search = document.getElementById('searchInput').value.trim();
			    currentPage = 1;
			    loadStockData();
			}

			function applyFilters() {
			    currentFilters.category = document.getElementById('categoryFilter').value;
			    currentFilters.minPrice = document.getElementById('minPrice').value;
			    currentFilters.maxPrice = document.getElementById('maxPrice').value;
			    currentFilters.stockStatus = document.getElementById('stockFilter').value;
			    currentPage = 1;
			    loadStockData();
			}

			function clearFilters() {
			    // Clear form inputs
			    document.getElementById('searchInput').value = '';
			    document.getElementById('categoryFilter').value = '';
			    document.getElementById('minPrice').value = '';
			    document.getElementById('maxPrice').value = '';
			    document.getElementById('stockFilter').value = 'all';

			    // Reset sort to default
			    document.querySelectorAll('.sort-btn').forEach(b => b.classList.remove('active'));
			    document.querySelector('.sort-btn[data-sort="name"][data-order="asc"]').classList.add('active');

			    // Reset filters object
			    currentFilters = {
			        search: '',
			        category: '',
			        minPrice: '',
			        maxPrice: '',
			        stockStatus: 'all',
			        sortBy: 'name',
			        sortOrder: 'asc'
			    };

			    currentPage = 1;
			    loadStockData();
			}

			async function loadStockData() {
			    try {
			        showLoadingAnimation();

			        const params = new URLSearchParams({
			            ...currentFilters,
			            page: currentPage,
			            limit: 10
			        });

			        const response = await axios.get(`/admin/stock/management/data?${params}`);
			        const result = response.data;

			        if (result.success) {
			            renderTable(result.data);
			            renderPagination(result.pagination);
			        } else {
			            showError('Failed to load stock data');
			        }
			    } catch (error) {
			        console.error('Error loading stock data:', error);
			        showError('Failed to load stock data. Please try again.');
			    }
			}

			function renderTable(products) {
			    const tbody = document.getElementById('stockTableBody');

			    if (products.length === 0) {
			        tbody.innerHTML = `
			            <tr>
			                <td colspan="8" class="no-data">
			                    <i class="fas fa-box-open"></i>
			                    <h3>No products found</h3>
			                    <p>Try adjusting your filters or search terms</p>
			                </td>
			            </tr>
			        `;
			        return;
			    }

			    tbody.innerHTML = products.map(product => `
			        <tr>
			            <td>
			                <div class="product-info">
			                    <img src="${product.images && product.images[0] ? product.images[0].url : '/placeholder.svg?height=50&width=50'}"
			                         alt="${product.productName}" class="product-image"
			                         onerror="this.src='/placeholder.svg?height=50&width=50'">
			                    <div class="product-details">
			                        <h4>${escapeHtml(product.productName)}</h4>
			                        <p>${product.description ? escapeHtml(product.description.substring(0, 60)) + '...' : 'No description'}</p>
			                    </div>
			                </div>
			            </td>
			            <td><code>${product.sku || '-'}</code></td>
			            <td>${product.categoryNames ? product.categoryNames.join(', ') : '-'}</td>
			            <td>${product.brand || '-'}</td>
			            <td class="price">₹${product.salePrice ? product.salePrice.toLocaleString('en-IN') : '0'}</td>
			            <td>
			                <span class="stock-badge ${getStockClass(product.stockQuantity)}">
			                    ${product.stockQuantity || 0}
			                </span>
			            </td>
			            <td>
			                <span class="status-badge ${product.isBlocked ? 'status-inactive' : 'status-active'}">

			                    ${product.isBlocked ? 'INACTIVE' : 'ACTIVE'}
			                </span>
			            </td>
			            <td>
			                <button class="action-btn" onclick="viewProduct('${product._id}')" title="View Stock History">
			                    <i class="fas fa-history"></i> View
			                </button>
			            </td>
			        </tr>
			    `).join('');
			}

			function getStockClass(quantity) {
			    const qty = parseInt(quantity) || 0;
			    if (qty === 0) return 'stock-out';
			    if (qty <= 10) return 'stock-low';
			    return 'stock-high';
			}

			function renderPagination(pagination) {
			    const info = document.getElementById('paginationInfo');
			    const controls = document.getElementById('paginationControls');

			    const start = (pagination.page - 1) * pagination.limit + 1;
			    const end = Math.min(pagination.page * pagination.limit, pagination.total);

			    info.innerHTML = `
			        <i class="fas fa-info-circle"></i>
			        Showing ${start}-${end} of ${pagination.total} products
			    `;

			    let paginationHTML = '';

			    // Previous button
			    paginationHTML += `
			        <button class="page-btn" ${pagination.page === 1 ? 'disabled' : ''}
			                onclick="changePage(${pagination.page - 1})" title="Previous Page">
			            <i class="fas fa-chevron-left"></i>
			        </button>
			    `;

			    // Page numbers
			    const startPage = Math.max(1, pagination.page - 2);
			    const endPage = Math.min(pagination.totalPages, pagination.page + 2);

			    if (startPage > 1) {
			        paginationHTML += `
			            <button class="page-btn" onclick="changePage(1)">1</button>
			        `;
			        if (startPage > 2) {
			            paginationHTML += `<span class="page-ellipsis">...</span>`;
			        }
			    }

			    for (let i = startPage; i <= endPage; i++) {
			        paginationHTML += `
			            <button class="page-btn ${i === pagination.page ? 'active' : ''}"
			                    onclick="changePage(${i})">
			                ${i}
			            </button>
			        `;
			    }

			    if (endPage < pagination.totalPages) {
			        if (endPage < pagination.totalPages - 1) {
			            paginationHTML += `<span class="page-ellipsis">...</span>`;
			        }
			        paginationHTML += `
			            <button class="page-btn" onclick="changePage(${pagination.totalPages})">${pagination.totalPages}</button>
			        `;
			    }

			    // Next button
			    paginationHTML += `
			        <button class="page-btn" ${pagination.page === pagination.totalPages ? 'disabled' : ''}
			                onclick="changePage(${pagination.page + 1})" title="Next Page">
			            <i class="fas fa-chevron-right"></i>
			        </button>
			    `;

			    controls.innerHTML = paginationHTML;
			}

			function changePage(page) {
			    if (page < 1) return;
			    currentPage = page;
			    loadStockData();

			    // Smooth scroll to top
			    document.querySelector('.table-container').scrollIntoView({
			        behavior: 'smooth',
			        block: 'start'
			    });
			}

			async function viewProduct(productId) {
			    const modal = document.getElementById('stockModal');
			    const tbody = document.getElementById('stockRegistryBody');

			    tbody.innerHTML = `
			        <tr>
			            <td colspan="5" class="loading">
			                <i class="fas fa-spinner fa-spin"></i>
			                <div>Loading stock history...</div>
			            </td>
			        </tr>
			    `;

			    modal.style.display = 'flex';

			    try {
			        const response = await axios.get(`/admin/stock/registry/${productId}`);
			        const registry = response.data.stockRegistry;

			        if (!registry || registry.length === 0) {
			            tbody.innerHTML = `
			                <tr>
			                    <td colspan="5" class="no-data">
			                        <i class="fas fa-history"></i>
			                        <h3>No stock history available</h3>
			                        <p>This product has no recorded stock movements</p>
			                    </td>
			                </tr>
			            `;
			            return;
			        }

			        tbody.innerHTML = registry.map(entry => `
			            <tr>
			                <td>
			                    <div>
			                        <strong>${new Date(entry.timestamp).toLocaleDateString('en-IN')}</strong><br>
			                        <small>${new Date(entry.timestamp).toLocaleTimeString('en-IN')}</small>
			                    </div>
			                </td>
			                <td>
			                    <span class="action-badge action-${entry.action.toLowerCase()}">
			                        <i class="fas ${getActionIcon(entry.action)}"></i>
			                        ${entry.action}
			                    </span>
			                </td>
			                <td>
												<strong class="${entry.action === 'stock_in' ? 'text-success' : 'text-danger'}">
													${entry.action === 'stock_in' ? '+' : '-'}${entry.quantity}
												</strong>
											</td>
			                <td>${entry.reason || '-'}</td>
			                <td>
			                    <div>
			                        <i class="fas fa-user"></i>
			                        ${entry.performedBy || 'System'}
			                    </div>
			                </td>
			            </tr>
			        `).join('');

			    } catch (error) {
			        console.error('Error fetching stock history:', error);
			        tbody.innerHTML = `
			            <tr>
			                <td colspan="5" class="no-data">
			                    <i class="fas fa-exclamation-triangle"></i>
			                    <h3>Error loading stock history</h3>
			                    <p>Please try again later</p>
			                </td>
			            </tr>
			        `;
			    }
			}

			function getActionIcon(action) {
			    const icons = {
			        'ADD': 'fa-plus',
			        'REMOVE': 'fa-minus',
			        'ADJUST': 'fa-edit',
			        'SALE': 'fa-shopping-cart',
			        'RETURN': 'fa-undo'
			    };
			    return icons[action.toUpperCase()] || 'fa-exchange-alt';
			}

			function closeStockModal() {
			    document.getElementById('stockModal').style.display = 'none';
			}



			function showError(message) {
			    const tbody = document.getElementById('stockTableBody');
			    tbody.innerHTML = `
			        <tr>
			            <td colspan="8" class="no-data">
			                <i class="fas fa-exclamation-triangle"></i>
			                <h3>Error</h3>
			                <p>${message}</p>
			                <button class="btn btn-primary" onclick="loadStockData()" style="margin-top: 1rem;">
			                    <i class="fas fa-refresh"></i> Try Again
			                </button>
			            </td>
			        </tr>
			    `;
			}

			function escapeHtml(text) {
			    const map = {
			        '&': '&amp;',
			        '<': '&lt;',
			        '>': '&gt;',
			        '"': '&quot;',
			        "'": '&#039;'
			    };
			    return text.replace(/[&<>"']/g, function(m) { return map[m]; });
			}

			// Keyboard shortcuts
			document.addEventListener('keydown', function(e) {
			    // Ctrl/Cmd + K to focus search
			    if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
			        e.preventDefault();
			        document.getElementById('searchInput').focus();
			    }

			    // Escape to close modal
			    if (e.key === 'Escape') {
			        closeStockModal();
			    }
			});
		</script>
	</body>
</html>
