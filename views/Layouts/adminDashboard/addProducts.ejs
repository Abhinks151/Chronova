<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Add Product - Admin Panel</title>

		<!-- External CDNs -->
		<link
			href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css"
			rel="stylesheet"
		/>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.4.0/axios.min.js"></script>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
		<link rel="stylesheet" href="/styles/dashboard.css" />
		<link rel="stylesheet" href="/styles/admin-add-products.css" />
	</head>
	<body>
		<%- include('../../partials/sidebar') %>
		<div class="main-content">
			<div class="page-header">
				<h1>Add New Product</h1>
				<p>Add a new watch product to your inventory</p>
			</div>

			<div id="alertContainer"></div>

			<form id="productForm" class="form-container">
				<!-- Basic Information -->
				<div class="form-section">
					<h2 class="section-title">Basic Information</h2>
					<div class="form-grid">
						<div class="form-group">
							<label for="productName"
								>Product Name
								<span class="required">*</span></label
							>
							<input
								type="text"
								id="productName"
								name="productName"
								required
							/>
						</div>

						<div class="form-group">
							<label for="brand"
								>Brand <span class="required">*</span></label
							>
							<select id="brand" name="brand" required>
								<option value="">Select Brand</option>
								<option value="Rolex">Rolex</option>
								<option value="Omega">Omega</option>
								<option value="Seiko">Seiko</option>
								<option value="Casio">Casio</option>
								<option value="Tissot">Tissot</option>
								<option value="Citizen">Citizen</option>
								<option value="TAG Heuer">TAG Heuer</option>
								<option value="Fossil">Fossil</option>
								<option value="Apple">Apple</option>
								<option value="Samsung">Samsung</option>
								<option value="Other">Other</option>
							</select>
						</div>

						<div class="form-group">
							<label for="productType"
								>Product Type
								<span class="required">*</span></label
							>
							<select
								id="productType"
								name="productType"
								required
							>
								<option value="">Select Product Type</option>
								<option value="Analog">Analog</option>
								<option value="Digital">Digital</option>
								<option value="Smart">Smart</option>
								<option value="Hybrid">Hybrid</option>
								<option value="Automatic">Automatic</option>
								<option value="Mechanical">Mechanical</option>
								<option value="Quartz">Quartz</option>
								<option value="Chronograph">Chronograph</option>
								<option value="Skeleton">Skeleton</option>
							</select>
						</div>

						<div class="form-group">
							<label>
								Categories <span class="required">*</span>
							</label>
							<div class="checkbox-group" id="categoryCheckboxes">
								<% categories.forEach(category => { %>
								<div class="checkbox-item">
									<input
										type="checkbox"
										id="cat-<%= category._id %>"
										name="category"
										value="<%= category._id %>"
									/>
									<label for="cat-<%= category._id %>"
										><%= category.categoryName %></label
									>
								</div>
								<% }); %>
							</div>
						</div>

						<div class="form-group full-width">
							<label for="description"
								>Description
								<span class="required">*</span></label
							>
							<textarea
								id="description"
								name="description"
								placeholder="Enter detailed product description..."
								required
							></textarea>
						</div>
					</div>
				</div>

				<!-- Watch Specifications -->
				<div class="form-section">
					<h2 class="section-title">Watch Specifications</h2>
					<div class="form-grid">
						<div class="form-group">
							<label for="strapType"
								>Strap Type
								<span class="required">*</span></label
							>
							<select id="strapType" name="strapType" required>
								<option value="">Select Strap Type</option>
								<option value="Leather">Leather</option>
								<option value="Metal">Metal</option>
								<option value="Rubber">Rubber</option>
								<option value="Fabric">Fabric</option>
								<option value="Silicone">Silicone</option>
								<option value="Ceramic">Ceramic</option>
								<option value="NATO">NATO</option>
							</select>
						</div>

						<div class="form-group">
							<label for="slypeType"
								>Style Type
								<span class="required">*</span></label
							>
							<select id="slypeType" name="slypeType" required>
								<option value="">Select Style Type</option>
								<option value="Classic">Classic</option>
								<option value="Modern">Modern</option>
								<option value="Vintage">Vintage</option>
								<option value="Contemporary">
									Contemporary
								</option>
								<option value="Traditional">Traditional</option>
							</select>
						</div>

						<div class="form-group">
							<label for="color"
								>Color <span class="required">*</span></label
							>
							<input
								type="text"
								id="color"
								name="color"
								placeholder="e.g., Black, Silver, Gold"
								required
							/>
						</div>

						<div class="form-group">
							<label for="dialSize"
								>Dial Size (mm)
								<span class="required">*</span></label
							>
							<input
								type="number"
								id="dialSize"
								name="dialSize"
								placeholder="e.g., 40"
								min="20"
								max="60"
								required
							/>
						</div>

						<div class="form-group">
							<label for="dialShape"
								>Dial Shape
								<span class="required">*</span></label
							>
							<select id="dialShape" name="dialShape" required>
								<option value="">Select Dial Shape</option>
								<option value="Round">Round</option>
								<option value="Square">Square</option>
								<option value="Rectangle">Rectangle</option>
								<option value="Oval">Oval</option>
								<option value="Tonneau">Tonneau</option>
							</select>
						</div>

						<div class="form-group">
							<label for="movement"
								>Movement Type
								<span class="required">*</span></label
							>
							<select id="movement" name="movement" required>
								<option value="">Select Movement</option>
								<option value="Quartz">Quartz</option>
								<option value="Automatic">Automatic</option>
								<option value="Manual">Manual</option>
								<option value="Digital">Digital</option>
								<option value="Solar">Solar</option>
							</select>
						</div>

						<div class="form-group">
							<label for="waterResistance"
								>Water Resistance
								<span class="required">*</span></label
							>
							<select
								id="waterResistance"
								name="waterResistance"
								required
							>
								<option value="">
									Select Water Resistance
								</option>
								<option value="30M">30M (3 ATM)</option>
								<option value="50M">50M (5 ATM)</option>
								<option value="100M">100M (10 ATM)</option>
								<option value="200M">200M (20 ATM)</option>
								<option value="300M">300M (30 ATM)</option>
								<option value="500M">500M (50 ATM)</option>
							</select>
						</div>

						<div class="form-group">
							<label for="warranty"
								>Warranty Period
								<span class="required">*</span></label
							>
							<select id="warranty" name="warranty" required>
								<option value="">Select Warranty</option>
								<option value="6 months">6 Months</option>
								<option value="1 year">1 Year</option>
								<option value="2 years">2 Years</option>
								<option value="3 years">3 Years</option>
								<option value="5 years">5 Years</option>
								<option value="Lifetime">Lifetime</option>
							</select>
						</div>

						<div class="form-group">
							<label for="weight"
								>Weight (grams)
								<span class="required">*</span></label
							>
							<input
								type="number"
								id="weight"
								name="weight"
								placeholder="e.g., 150"
								min="10"
								max="1000"
								required
							/>
						</div>
					</div>
				</div>

				<!-- Pricing & Inventory -->
				<div class="form-section">
					<h2 class="section-title">Pricing & Inventory</h2>
					<div class="form-grid">
						<div class="form-group">
							<label for="price"
								>Regular Price
								<span class="required">*</span></label
							>
							<input
								type="number"
								id="price"
								name="price"
								step="0.01"
								min="0"
								required
								placeholder="0.00"
							/>
						</div>

						<div class="form-group">
							<label for="salePrice"
								>Sale Price
								<span class="required">*</span></label
							>
							<input
								type="number"
								id="salePrice"
								name="salePrice"
								step="0.01"
								min="0"
								required
								placeholder="0.00"
							/>
						</div>

						<div class="form-group">
							<label for="stockQuantity"
								>Stock Quantity
								<span class="required">*</span></label
							>
							<input
								type="number"
								id="stockQuantity"
								name="stockQuantity"
								min="0"
								required
								placeholder="0"
							/>
						</div>

						<div class="form-group">
							<label for="sku"
								>SKU Code <span class="required">*</span></label
							>
							<input
								type="text"
								id="sku"
								name="sku"
								placeholder="e.g., WTH-001"
								required
							/>
						</div>
					</div>
				</div>

				<!-- Product Images -->
				<div class="form-section">
					<h2 class="section-title">
						Product Images
						<span style="color: #e74c3c; font-size: 14px;"
							>(4 images required)</span
						>
					</h2>
					<div class="image-upload-container">
						<div class="image-upload-box" data-index="0">
							<div class="upload-icon">📷</div>
							<div class="upload-text">
								<strong>Primary Image</strong><br />
								Click to upload
							</div>
							<input
								type="file"
								accept="image/*"
								style="display: none;"
								data-index="0"
							/>
						</div>

						<div class="image-upload-box" data-index="1">
							<div class="upload-icon">📷</div>
							<div class="upload-text">
								<strong>Image 2</strong><br />
								Click to upload
							</div>
							<input
								type="file"
								accept="image/*"
								style="display: none;"
								data-index="1"
							/>
						</div>

						<div class="image-upload-box" data-index="2">
							<div class="upload-icon">📷</div>
							<div class="upload-text">
								<strong>Image 3</strong><br />
								Click to upload
							</div>
							<input
								type="file"
								accept="image/*"
								style="display: none;"
								data-index="2"
							/>
						</div>

						<div class="image-upload-box" data-index="3">
							<div class="upload-icon">📷</div>
							<div class="upload-text">
								<strong>Image 4</strong><br />
								Click to upload
							</div>
							<input
								type="file"
								accept="image/*"
								style="display: none;"
								data-index="3"
							/>
						</div>
					</div>
				</div>

				<div class="form-actions">
					<button
						type="button"
						class="btn btn-secondary"
						onclick="resetForm()"
					>
						Reset
					</button>
					<button type="submit" class="btn btn-primary">
						Add Product
					</button>
				</div>
			</form>
		</div>

		<!-- Image Cropper Modal -->
		<div id="cropperModal" class="modal">
			<div class="modal-content">
				<div class="modal-header">
					<h3>Crop Image</h3>
					<span class="close">&times;</span>
				</div>
				<div class="crop-container">
					<img id="cropperImage" style="max-width: 100%;" />
				</div>
				<div class="crop-controls">
					<button
						type="button"
						class="btn btn-secondary"
						id="cancelCrop"
					>
						Cancel
					</button>
					<button
						type="button"
						class="btn btn-success"
						id="applyCrop"
					>
						Apply Crop
					</button>
				</div>
			</div>
		</div>
		<script>
						// Product Form Handler JavaScript
			let cropper = null;
			let currentImageIndex = null;
			let croppedImages = {};

			// Initialize event listeners
			document.addEventListener('DOMContentLoaded', function() {
			    initializeImageUpload();
			    initializeFormSubmission();
			    initializeCropperModal();
			    initializeToggleSwitches();
			    initializePriceValidation();
			    initializeCategoryValidation();
			    initializeAutoSKU();
			});

			// Initialize image upload functionality
			function initializeImageUpload() {
			    const uploadBoxes = document.querySelectorAll('.image-upload-box');

			    uploadBoxes.forEach(box => {
			        const input = box.querySelector('input[type="file"]');
			        const index = box.dataset.index;

			        box.addEventListener('click', () => {
			            if (!box.classList.contains('has-image')) {
			                input.click();
			            }
			        });

			        input.addEventListener('change', (e) => {
			            if (e.target.files && e.target.files[0]) {
			                currentImageIndex = index;
			                openCropper(e.target.files[0]);
			            }
			        });
			    });
			}

			// Open image cropper modal
			function openCropper(file) {
			    const reader = new FileReader();
			    reader.onload = function(e) {
			        const cropperImage = document.getElementById('cropperImage');
			        cropperImage.src = e.target.result;

			        document.getElementById('cropperModal').style.display = 'block';

			        // Initialize cropper
			        if (cropper) {
			            cropper.destroy();
			        }

			        cropper = new Cropper(cropperImage, {
			            aspectRatio: 1,
			            viewMode: 1,
			            dragMode: 'move',
			            autoCropArea: 0.8,
			            restore: false,
			            guides: false,
			            center: false,
			            highlight: false,
			            cropBoxMovable: true,
			            cropBoxResizable: true,
			            toggleDragModeOnDblclick: false,
			        });
			    };
			    reader.readAsDataURL(file);
			}

			// Initialize cropper modal functionality
			function initializeCropperModal() {
			    const modal = document.getElementById('cropperModal');
			    const closeBtn = modal.querySelector('.close');
			    const cancelBtn = document.getElementById('cancelCrop');
			    const applyBtn = document.getElementById('applyCrop');

			    closeBtn.addEventListener('click', closeCropper);
			    cancelBtn.addEventListener('click', closeCropper);
			    applyBtn.addEventListener('click', applyCrop);

			    window.addEventListener('click', function(e) {
			        if (e.target === modal) {
			            closeCropper();
			        }
			    });
			}

			// Close cropper modal
			function closeCropper() {
			    document.getElementById('cropperModal').style.display = 'none';
			    if (cropper) {
			        cropper.destroy();
			        cropper = null;
			    }
			    currentImageIndex = null;
			}

			// Apply crop and save image
			function applyCrop() {
			    if (cropper && currentImageIndex !== null) {
			        const canvas = cropper.getCroppedCanvas({
			            width: 400,
			            height: 400,
			            imageSmoothingEnabled: true,
			            imageSmoothingQuality: 'high',
			        });

			        canvas.toBlob(function(blob) {
			            croppedImages[currentImageIndex] = blob;
			            updateImagePreview(currentImageIndex, canvas.toDataURL());
			            closeCropper();
			        }, 'image/jpeg', 0.9);
			    }
			}

			// Update image preview after cropping
			function updateImagePreview(index, dataURL) {
			    const uploadBox = document.querySelector(`[data-index="${index}"]`);
			    uploadBox.classList.add('has-image');
			    uploadBox.classList.remove('required');
			    uploadBox.innerHTML = `
			        <img src="${dataURL}" alt="Preview" class="image-preview">
			        <button type="button" class="remove-image" onclick="removeImage(${index})">Remove</button>
			    `;
			}

			// Remove uploaded image
			function removeImage(index) {
			    const uploadBox = document.querySelector(`[data-index="${index}"]`);
			    uploadBox.classList.remove('has-image');
			    uploadBox.classList.add('required');

			    const imageLabels = ['Primary Image', 'Image 2', 'Image 3', 'Image 4'];
			    uploadBox.innerHTML = `
			        <div class="upload-icon">📷</div>
			        <div class="upload-text">
			            <strong>${imageLabels[index]}</strong><br>
			            Click to upload <span style="color: #e74c3c;">*</span>
			        </div>
			        <input type="file" accept="image/*" style="display: none;" data-index="${index}">
			    `;

			    delete croppedImages[index];

			    // Re-initialize event listener for this box
			    const input = uploadBox.querySelector('input[type="file"]');
			    uploadBox.addEventListener('click', () => {
			        if (!uploadBox.classList.contains('has-image')) {
			            input.click();
			        }
			    });

			    input.addEventListener('change', (e) => {
			        if (e.target.files && e.target.files[0]) {
			            currentImageIndex = index;
			            openCropper(e.target.files[0]);
			        }
			    });
			}

			// Initialize form submission
			function initializeFormSubmission() {
			    const form = document.getElementById('productForm');
			    form.addEventListener('submit', handleFormSubmission);
			}

			// Handle form submission
			async function handleFormSubmission(e) {
			    e.preventDefault();

			    // Validate form before submission
			    if (!validateForm()) {
			        return;
			    }

			    const submitBtn = e.target.querySelector('button[type="submit"]');
			    submitBtn.classList.add('loading');
			    submitBtn.disabled = true;
			    submitBtn.textContent = 'Adding Product...';

			    try {
			        const formData = new FormData();

			        // Add form fields
			        const formElements = e.target.elements;
			        for (let element of formElements) {
			            if (element.type === 'checkbox' && element.name === 'category') {
			                if (element.checked) {
			                    formData.append('category[]', element.value);
			                }
			            } else if (element.type !== 'file' && element.type !== 'submit' && element.name && element.type !== 'checkbox') {
			                formData.append(element.name, element.value);
			            }
			        }

			        // Add cropped images
			        Object.keys(croppedImages).forEach(index => {
			            formData.append(`image_${index}`, croppedImages[index], `image_${index}.jpg`);
			        });

			        const response = await axios.post('/admin/products/add', formData, {
			            headers: {
			                'Content-Type': 'multipart/form-data'
			            }
			        });

			        showAlert(response.data.message || 'Product added successfully!', 'success');

			        // Reset form after successful submission
			        setTimeout(() => {
			            resetForm();
			        }, 1000);

			        // Redirect after showing success message
			        setTimeout(() => {
			            window.location.href = response.data.redirect || '/admin/products';
			        }, 2000);

			    } catch (error) {
			        console.error('Error adding product:', error);
			        const errorMessage = error.response?.data?.message || 'Error adding product. Please try again.';
			        showAlert(errorMessage, 'error');
			    } finally {
			        submitBtn.classList.remove('loading');
			        submitBtn.disabled = false;
			        submitBtn.textContent = 'Add Product';
			    }
			}

			// Form validation
			function validateForm() {
			    let isValid = true;
			    const errors = [];

			    // Check required fields
			    const requiredFields = [
			        'productName', 'brand', 'productType', 'sku', 'description',
			        'strapType', 'color', 'dialSize', 'dialShape', 'movement',
			        'waterResistance', 'warranty', 'weight', 'price', 'salePrice', 'stockQuantity'
			    ];

			    requiredFields.forEach(fieldName => {
			        const field = document.getElementById(fieldName);
			        if (!field.value.trim()) {
			            field.style.borderColor = '#e74c3c';
			            errors.push(`${fieldName.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())} is required`);
			            isValid = false;
			        } else {
			            field.style.borderColor = '#e1e8ed';
			        }
			    });

			    // Check if at least one category is selected
			    const categoryCheckboxes = document.querySelectorAll('input[name="category"]:checked');
			    if (categoryCheckboxes.length === 0) {
			        errors.push('Please select at least one category');
			        isValid = false;
			    }

			    // Check if all 4 images are uploaded
			    const uploadedImages = Object.keys(croppedImages).length;
			    if (uploadedImages !== 4) {
			        errors.push('Please upload all 4 required images');
			        isValid = false;
			    }

			    // Price validation
			    const price = parseFloat(document.getElementById('price').value);
			    const salePrice = parseFloat(document.getElementById('salePrice').value);

			    if (price <= 0) {
			        errors.push('Regular price must be greater than 0');
			        isValid = false;
			    }

			    if (salePrice <= 0) {
			        errors.push('Sale price must be greater than 0');
			        isValid = false;
			    }

			    if (salePrice > price) {
			        errors.push('Sale price cannot be greater than regular price');
			        isValid = false;
			    }

			    // Stock validation
			    const stock = parseInt(document.getElementById('stockQuantity').value);
			    if (stock < 0) {
			        errors.push('Stock quantity cannot be negative');
			        isValid = false;
			    }

			    if (!isValid) {
			        showAlert(errors.join('<br>'), 'error');
			    }

			    return isValid;
			}

			// Show alert messages
			function showAlert(message, type) {
			    const alertContainer = document.getElementById('alertContainer');
			    const alert = document.createElement('div');
			    alert.className = `alert alert-${type}`;
			    alert.innerHTML = message;

			    alertContainer.appendChild(alert);

			    setTimeout(() => {
			        alert.remove();
			    }, 5000);
			}

			// Reset form
			function resetForm() {
			    document.getElementById('productForm').reset();

			    // Reset image uploads
			    for (let i = 0; i < 4; i++) {
			        removeImage(i);
			    }

			    // Reset toggles to default state
			    const toggles = document.querySelectorAll('.toggle-switch');
			    toggles.forEach(toggle => {
			        toggle.classList.add('active');
			        const field = toggle.dataset.field;
			        const hiddenInput = document.querySelector(`input[name="${field}"]`);
			        if (hiddenInput) {
			            hiddenInput.value = 'false';
			        }
			    });

			    // Clear cropped images
			    croppedImages = {};

			    // Clear any error styling
			    const inputs = document.querySelectorAll('input, select, textarea');
			    inputs.forEach(input => {
			        input.style.borderColor = '#e1e8ed';
			    });

			    // Clear alerts
			    document.getElementById('alertContainer').innerHTML = '';
			}

			// Initialize toggle switches
			function initializeToggleSwitches() {
			    const toggles = document.querySelectorAll('.toggle-switch');

			    toggles.forEach(toggle => {
			        toggle.addEventListener('click', function() {
			            this.classList.toggle('active');

			            const field = this.dataset.field;
			            const hiddenInput = document.querySelector(`input[name="${field}"]`);

			            if (hiddenInput) {
			                hiddenInput.value = this.classList.contains('active') ? 'false' : 'true';
			            }
			        });
			    });
			}

			// Initialize price validation
			function initializePriceValidation() {
			    const priceInput = document.getElementById('price');
			    const salePriceInput = document.getElementById('salePrice');
			    const priceInfo = document.getElementById('priceInfo');

			    function validatePrices() {
			        const price = parseFloat(priceInput.value) || 0;
			        const salePrice = parseFloat(salePriceInput.value) || 0;

			        if (price > 0 && salePrice > 0) {
			            if (salePrice > price) {
			                priceInfo.style.display = 'block';
			                priceInfo.style.backgroundColor = '#f8d7da';
			                priceInfo.style.color = '#721c24';
			                priceInfo.textContent = 'Sale price cannot be greater than regular price';
			                salePriceInput.style.borderColor = '#e74c3c';
			            } else {
			                const discount = ((price - salePrice) / price * 100).toFixed(1);
			                priceInfo.style.display = 'block';
			                priceInfo.style.backgroundColor = '#e8f4fd';
			                priceInfo.style.color = '#0c5460';
			                priceInfo.textContent = `Discount: ${discount}% off`;
			                salePriceInput.style.borderColor = '#e1e8ed';
			            }
			        } else {
			            priceInfo.style.display = 'none';
			            salePriceInput.style.borderColor = '#e1e8ed';
			        }
			    }

			    priceInput.addEventListener('input', validatePrices);
			    salePriceInput.addEventListener('input', validatePrices);
			}

			// Initialize category validation
			function initializeCategoryValidation() {
			    const categoryCheckboxes = document.querySelectorAll('input[name="category"]');

			    categoryCheckboxes.forEach(checkbox => {
			        checkbox.addEventListener('change', function() {
			            const checkedCategories = document.querySelectorAll('input[name="category"]:checked');
			            const categoryGrid = document.getElementById('categoryGrid');

			            if (checkedCategories.length === 0) {
			                categoryGrid.style.borderColor = '#e74c3c';
			            } else {
			                categoryGrid.style.borderColor = 'transparent';
			            }
			        });
			    });
			}

			// Initialize auto-generated SKU
			function initializeAutoSKU() {
			    const brandSelect = document.getElementById('brand');
			    const productNameInput = document.getElementById('productName');
			    const skuInput = document.getElementById('sku');

			    function generateSKU() {
			        const brand = brandSelect.value;
			        const productName = productNameInput.value;

			        if (brand && productName) {
			            const brandCode = brand.substring(0, 3).toUpperCase();
			            const productCode = productName.replace(/\s+/g, '').substring(0, 3).toUpperCase();
			            const randomNum = Math.floor(Math.random() * 1000).toString().padStart(3, '0');

			            skuInput.value = `${brandCode}-${productCode}-${randomNum}`;
			        }
			    }

			    brandSelect.addEventListener('change', generateSKU);
			    productNameInput.addEventListener('input', generateSKU);
			}

			// Global functions for inline event handlers
			window.removeImage = removeImage;
			window.resetForm = resetForm;
		</script>
	</body>
</html>
